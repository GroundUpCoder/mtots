import glu
import opengles3 as gl
import sdl
import bytearray

final app = glu.App()
app.width = 640
app.height = 640
app.init()

final VS = r"""
#version 300 es
precision mediump float;

in vec3 aVertexPosition;

void main(void) {
  gl_PointSize = 40.0;
  gl_Position = vec4(aVertexPosition, 1.0);
}
""".strip()

final FS = r"""
#version 300 es
precision mediump float;

out vec4 fragColor;

void main(void) {
  fragColor = vec4(0.5, 0.5, 1.0, 1.0);
}
""".strip()

final shaderProgram = glu.compileProgram(VS, FS)
final aVertexPosition = gl.getAttribLocation(shaderProgram, 'aVertexPosition')
print('aVertexPosition = %s' % [aVertexPosition])

final vertices = [
  -0.5, -0.5, 0,
  -0.25, 0.5, 0,
  0.0, -0.5, 0,
  0.25, 0.5, 0,
  0.5, -0.5, 0
]
final verticesArray = bytearray.fromF32(vertices)
final indices = [0, 1, 2, 0, 2, 3, 2, 3, 4]
final indicesArray = bytearray.fromU16(indices)

# VAO
final trapezoidVAO = gl.genVertexArray()
gl.bindVertexArray(trapezoidVAO)

# VBO
final trapezoidVertexBuffer = gl.genBuffer()
gl.bindBuffer(gl.ARRAY_BUFFER, trapezoidVertexBuffer)
gl.bufferData(gl.ARRAY_BUFFER, verticesArray, gl.STATIC_DRAW)
gl.enableVertexAttribArray(aVertexPosition)
gl.vertexAttribPointer(aVertexPosition, 3, gl.FLOAT, false, 0, 0)

# IBO
final trapezoidIndexBuffer = gl.genBuffer()
gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, trapezoidIndexBuffer)
gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, indicesArray, gl.STATIC_DRAW)

# Clean
gl.bindVertexArray(0)
gl.useProgram(0)
gl.bindBuffer(gl.ARRAY_BUFFER, 0)
gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, 0)

print('trapezoidVertexBuffer = %r' % [trapezoidVertexBuffer])
print('trapezoidIndexBuffer = %r' % [trapezoidIndexBuffer])

var renderingModeIndex = 0
final renderingModes = [
  'TRIANGLES',
  'LINES',
  'POINTS',
  'LINE_LOOP',
  'LINE_STRIP',
  'TRIANGLE_STRIP',
  'TRIANGLE_FAN',
]

def drawWithMode(mode, indices):
  gl.bufferData(
    gl.ELEMENT_ARRAY_BUFFER,
    bytearray.fromU16(indices),
    gl.STATIC_DRAW)
  gl.drawElements(mode, len(indices), gl.UNSIGNED_SHORT, 0)

def draw():
  gl.clearColor(0, 0.2, 0, 1)
  gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT)
  gl.viewport(0, 0, app.viewport_width, app.viewport_height)

  gl.bindVertexArray(trapezoidVAO)
  gl.useProgram(shaderProgram)

  final renderingMode = renderingModes[renderingModeIndex]
  print('renderingMode = %r' % [renderingMode])

  if renderingMode == 'TRIANGLES':
    drawWithMode(gl.TRIANGLES, [0, 1, 2, 2, 3, 4])
  elif renderingMode == 'LINES':
    drawWithMode(gl.LINES, [1, 3, 0, 4, 1, 2, 2, 3])
  elif renderingMode == 'POINTS':
    drawWithMode(gl.POINTS, [1, 2, 3])
  elif renderingMode == 'LINE_LOOP':
    drawWithMode(gl.LINE_LOOP, [2, 3, 4, 1, 0])
  elif renderingMode == 'LINE_STRIP':
    drawWithMode(gl.LINE_STRIP, [2, 3, 4, 1, 0])
  elif renderingMode == 'TRIANGLE_STRIP':
    drawWithMode(gl.TRIANGLE_STRIP, [0, 1, 2, 3, 4])
  elif renderingMode == 'TRIANGLE_FAN':
    drawWithMode(gl.TRIANGLE_FAN, [0, 1, 2, 3, 4])
  else:
    print('unrecognized rendering mode %r' % [renderingMode])

  # clean
  gl.bindVertexArray(0)

draw()
sdl.gl.swapWindow(app.window)


def onKeydown(event):
  renderingModeIndex = (renderingModeIndex + 1) % len(renderingModes)
  draw()
  sdl.gl.swapWindow(app.window)

app.onKeydown(onKeydown)

app.run()
