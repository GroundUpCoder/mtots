r"""
An alternative version of ch02-07-cone that uses BasicDrawable3D
"""
import glu
import opengles3 as gl
import sdl
import bytearray
import glmatrix
import os
import json


class BasicDrawable3D:
  def __init__(vertices, indices, program):
    this.vertices = vertices  # a list of numbers representing vertices
    this.indices = indices    # a list of numbers representing indices
    this.program = program    # a shader program
    this.verticesBuffer = gl.genBuffer()
    this.indicesBuffer = gl.genBuffer()
    this.vao = gl.genVertexArray()
    this.aVertexPosition = gl.getAttribLocation(program, 'aVertexPosition')
    this.uProjectionMatrix = gl.getUniformLocation(program, 'uProjectionMatrix')
    this.uModelViewMatrix = gl.getUniformLocation(program, 'uModelViewMatrix')
    this.projectionMatrixBytes = nil
    this.modelViewMatrixBytes = nil

    # Initialize verticesBuffer, and associate with aVertexPosition
    gl.bindBuffer(gl.ARRAY_BUFFER, this.verticesBuffer)
    gl.bufferData(gl.ARRAY_BUFFER, bytearray.fromF32(this.vertices), gl.STATIC_DRAW)
    gl.bindBuffer(gl.ARRAY_BUFFER, 0)

    # Initialize indicesBuffer
    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.indicesBuffer)
    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, bytearray.fromU16(this.indices), gl.STATIC_DRAW)
    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, 0)

    # Initialize vao
    gl.bindVertexArray(this.vao)
    gl.bindBuffer(gl.ARRAY_BUFFER, this.verticesBuffer)
    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.indicesBuffer)
    gl.enableVertexAttribArray(this.aVertexPosition)
    gl.vertexAttribPointer(this.aVertexPosition, 3, gl.FLOAT, false, 0, 0)
    gl.bindVertexArray(0)
    gl.bindBuffer(gl.ARRAY_BUFFER, 0)
    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, 0)

  def setProjectionMatrix(projectionMatrix):
    if this.projectionMatrixBytes is nil:
      this.projectionMatrixBytes = projectionMatrix.toByteArray()
    else:
      projectionMatrix.setByteArray(this.projectionMatrixBytes)

  def setModelViewMatrix(modelViewMatrix):
    if this.modelViewMatrixBytes is nil:
      this.modelViewMatrixBytes = modelViewMatrix.toByteArray()
    else:
      modelViewMatrix.setByteArray(this.modelViewMatrixBytes)

  def draw():
    gl.bindVertexArray(this.vao)
    gl.useProgram(this.program)

    gl.uniformMatrix4fv(this.uProjectionMatrix, 1, false, this.projectionMatrixBytes)
    gl.uniformMatrix4fv(this.uModelViewMatrix, 1, false, this.modelViewMatrixBytes)

    gl.drawElements(gl.LINE_LOOP, len(this.indices), gl.UNSIGNED_SHORT, 0)

    gl.useProgram(0)
    gl.bindVertexArray(0)


final coneFilePath = os.join(
  os.dirname(__path__),
  'models',
  'cone1.json')

print(coneFilePath)
final coneFile = open(coneFilePath)
final coneData = json.loads(coneFile.read())
coneFile.close()
print(coneFile)
print(json.dumps(coneData))

final app = glu.App()
app.width = 640
app.height = 640
app.init()

final VS = r"""
#version 300 es
precision mediump float;

// We will discuss these matrices in later chapters
uniform mat4 uModelViewMatrix;
uniform mat4 uProjectionMatrix;

in vec3 aVertexPosition;

void main(void) {
  gl_Position = uProjectionMatrix * uModelViewMatrix * vec4(aVertexPosition, 1.0);
}
""".strip()

final FS = r"""
#version 300 es
precision mediump float;

out vec4 fragColor;

void main(void) {
  fragColor = vec4(0.5, 0.9, 0.2, 1.0);
}
""".strip()

final coneDrawable = BasicDrawable3D(
  coneData.vertices,
  coneData.indices,
  glu.compileProgram(VS, FS))

final projectionMatrix = glmatrix.Mat4()
final modelViewMatrix = glmatrix.Mat4()

projectionMatrix.setPerspective(
  45, app.viewport_width / app.viewport_height, 0.1, 10000)
modelViewMatrix.setIdentity()
modelViewMatrix.setTranslate(modelViewMatrix, [0, 0, -5])

coneDrawable.setProjectionMatrix(projectionMatrix)

var x = 0
var y = 0
var z = -5
var dx = 0.007
var dz = 0.005
var dy = 0.008

@app.onDraw
def():
  modelViewMatrix.setIdentity()
  modelViewMatrix.setTranslate(modelViewMatrix, [x, y, z])
  coneDrawable.setModelViewMatrix(modelViewMatrix)
  x = x + dx
  z = z + dz
  y = y + dy
  if z > -4 or z < -5:
    dz = -dz
  if y > 1 or y < 0:
    dy = -dy
  if x > 1 or x < -1:
    dx = -dx

  gl.clearColor(0, 0.2, 0, 1)
  gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT)
  gl.viewport(0, 0, app.viewport_width, app.viewport_height)

  coneDrawable.draw()

  sdl.gl.swapWindow(app.window)

app.run()
