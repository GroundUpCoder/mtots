import sdl

var SCREEN_WIDTH = 640
var SCREEN_HEIGHT = 480

sdl.init()

var rect1 = sdl.Rect(
  SCREEN_WIDTH / 4,
  SCREEN_HEIGHT / 4,
  SCREEN_WIDTH / 2,
  SCREEN_HEIGHT / 2)

var rect2 = sdl.Rect(rect1.x, rect1.y, rect1.w, rect1.h)
rect2.x = rect2.y = 10

var window = sdl.createWindow(
  "my window",
  sdl.WINDOWPOS_CENTERED, sdl.WINDOWPOS_CENTERED,
  SCREEN_WIDTH, SCREEN_HEIGHT, 0)

var r = sdl.createRenderer(window, -1, 0)
r.setDrawColor(255, 160, 255, 255)
r.clear()
r.setDrawColor(80, 200, 0, 255)
r.fillRect(rect2)
r.setDrawColor(160, 176, 0, 255)
r.fillRect(rect1)
r.present()
print(r)

var event = sdl.Event()
print('sdl = %s' % [sdl])

var kstate = sdl.getKeyboardState()
var sc = sdl.scancode
var scancodes = sc.getKeys()

def eventLoop():
  while true:
    while sdl.pollEvent(event):
      if event.type == sdl.QUIT:
        print('Quit event received')
        sdl.quit()
        return 0
      elif event.type == sdl.KEYDOWN and event.repeat:
        pass # ignore repeats
      elif event.type == sdl.KEYDOWN and event.key == sdl.key.p:
        print('P:')
        for codestr in scancodes:
          if kstate[sc[codestr]]:
            print('  KEY %r' % [codestr])
      elif (event.type == sdl.KEYDOWN and
            event.key >= sdl.key.a and
            event.key <= sdl.key.z):
        print('Key %r' % [chr(ord('A') + event.key - sdl.key.a)])
      elif event.type == sdl.KEYDOWN:
        print('KEY %r' % [sdl.key.rget(event.key)])
      else:
        # print('event.type = %s' % [event.type])
        pass

eventLoop()
