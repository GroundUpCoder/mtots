import sdl

var SCREEN_WIDTH = 640
var SCREEN_HEIGHT = 480
final FPS = 60
final TICKS_PER_FRAME = (1 / FPS) * 1000 # 1 tick <-> millis

sdl.init()

var rect1 = sdl.Rect(
  SCREEN_WIDTH / 4,
  SCREEN_HEIGHT / 4,
  SCREEN_WIDTH / 2,
  SCREEN_HEIGHT / 2)

var rect2 = sdl.Rect(rect1.x, rect1.y, rect1.w, rect1.h)
rect2.x = rect2.y = 10

var window = sdl.createWindow(
  "my window",
  sdl.WINDOWPOS_CENTERED, sdl.WINDOWPOS_CENTERED,
  SCREEN_WIDTH, SCREEN_HEIGHT, 0)

var r = sdl.createRenderer(window, -1, 0)

var surfRect = sdl.Rect(0, 0, SCREEN_WIDTH / 3, SCREEN_HEIGHT / 3)
var surfDst = sdl.Rect(0, 0, surfRect.w, surfRect.h)
var surfPixDat = ByteArray(surfRect.w * surfRect.h * 4)
for i in range(len(surfPixDat) / 4):
  var x = i % surfRect.w
  var y = (i - x) / surfRect.w
  var imax = len(surfPixDat) / 4
  # print('x = %s, %s' % [x, 0xFF * x / surfRect.w])
  surfPixDat[4*i + 3] = 0xFF * (i / imax)             # R
  surfPixDat[4*i + 2] = 0xFF * (x / surfRect.w)       # G
  surfPixDat[4*i + 1] = 0xFF * (y / surfRect.h)       # B
  surfPixDat[4*i + 0] = 0xFF                          # A
var surf = sdl.createRGBSurfaceFrom(
  surfPixDat,
  surfRect.w, surfRect.h,
  32,             # depth
  surfRect.w * 4, # pitch (bytes per row)
  0xFF000000,     # Rmask
  0x00FF0000,     # Gmask
  0x0000FF00,     # Bmask
  0x000000FF,     # Amask
)
var texture = r.createTextureFromSurface(surf)
print(texture)

var event = sdl.Event()
print('sdl = %s' % [sdl])

var kstate = sdl.getKeyboardState()
var sc = sdl.scancode
var scancodes = sc.getKeys()

var point = sdl.Point(0, 0)

def eventLoop():
  while true:
    final startTicks = sdl.getTicks()

    while sdl.pollEvent(event):
      if event.type == sdl.QUIT:
        print('Quit event received')
        sdl.quit()
        return 0
      elif event.type == sdl.KEYDOWN and event.repeat:
        pass # ignore repeats
      elif event.type == sdl.KEYDOWN and event.key == sdl.key.p:
        print('P:')
        for codestr in scancodes:
          if kstate[sc[codestr]]:
            print('  KEY %r' % [codestr])
      elif (event.type == sdl.KEYDOWN and
            event.key >= sdl.key.a and
            event.key <= sdl.key.z):
        print('Key %r' % [chr(ord('A') + event.key - sdl.key.a)])
      elif event.type == sdl.KEYDOWN:
        print('KEY %r' % [sdl.key.rget(event.key)])
      elif event.type == sdl.MOUSEBUTTONDOWN:
        print('MOUSE DOWN %r %r %r' % [sdl.button.rget(event.button), event.timestamp,
          [event.x, event.y]])
      elif event.type == sdl.MOUSEBUTTONUP:
        print('MOUSE UP %r %r %r' % [sdl.button.rget(event.button), event.timestamp,
          [event.x, event.y]])
      elif event.type == sdl.MOUSEWHEEL:
        print('MOUSEWHEEL x:%s, y:%s' % [event.x, event.y])
      else:
        # print('event.type = %s' % [event.type])
        pass

    sdl.getMouseState(point)
    surfDst.x = point.x - surfDst.w / 2
    surfDst.y = point.y - surfDst.h / 2

    r.setDrawColor(255, 160, 255, 255)
    r.clear()
    r.setDrawColor(80, 200, 0, 255)
    r.fillRect(rect2)
    r.setDrawColor(160, 176, 0, 255)
    r.fillRect(rect1)
    r.copy(texture, surfRect, surfDst)
    r.present()

    final endTicks = sdl.getTicks()
    final elapsedTicks = endTicks - startTicks
    print('%s (%s, %s)' % [
      elapsedTicks, TICKS_PER_FRAME, (TICKS_PER_FRAME - elapsedTicks) // 1])
    if TICKS_PER_FRAME > elapsedTicks:
      sdl.delay((TICKS_PER_FRAME - elapsedTicks) // 1)

eventLoop()
