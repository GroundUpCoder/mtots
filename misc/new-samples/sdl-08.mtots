import sdl

final AMPLITUDE = 63
final SAMPLE_RATE = 44100
final SCREEN_WIDTH = 640
final SCREEN_HEIGHT = 480
final FPS = 60
final TICKS_PER_FRAME = (1 / FPS) * 1000 # 1 tick <-> millis

sdl.init(sdl.INIT_AUDIO | sdl.INIT_VIDEO)

################################################################
# Initialize Audio
################################################################
final spec = sdl.AudioSpec()
spec.freq = SAMPLE_RATE
spec.format = sdl.AUDIO_S8
spec.channels = 1
spec.samples = 512
spec.callback = 1
final adev = sdl.openAudioDevice(nil, 0, spec, nil, 0)
adev.pause(0)

################################################################
# Initialize Video
################################################################
var window = sdl.createWindow(
  "my window",
  sdl.WINDOWPOS_CENTERED, sdl.WINDOWPOS_CENTERED,
  SCREEN_WIDTH, SCREEN_HEIGHT, 0)
var r = sdl.createRenderer(window, -1, 0)
var kstate = sdl.getKeyboardState()

def eventLoop():
  final event = sdl.Event()
  while true:
    final startTicks = sdl.getTicks()

    while sdl.pollEvent(event):
      if event.type == sdl.QUIT:
        print('Quit event received')
        sdl.quit()
        return 0
      elif event.type == sdl.KEYDOWN and event.repeat:
        pass # ignore repeats

    if kstate[sdl.scancode.F]:
      r.setDrawColor(0, 100, 200, 255)
    elif kstate[sdl.scancode.J]:
      r.setDrawColor(0, 100, 100, 20)
    else:
      r.setDrawColor(255, 160, 255, 255)

    if kstate[sdl.scancode.D]:
      sdl.setCallbackSpec(0, 440, 0.25) # A4
    else:
      sdl.setCallbackSpec(0, 0, 0)

    if kstate[sdl.scancode.F]:
      sdl.setCallbackSpec(1, 523.25, 0.25) # C5
    else:
      sdl.setCallbackSpec(1, 0, 0)

    if kstate[sdl.scancode.J]:
      sdl.setCallbackSpec(2, 659.25, 0.25) # E5
    else:
      sdl.setCallbackSpec(2, 0, 0)

    if kstate[sdl.scancode.K]:
      sdl.setCallbackSpec(3, 783.99, 0.25) # G5
    else:
      sdl.setCallbackSpec(3, 0, 0)

    r.clear()
    r.present()

    final endTicks = sdl.getTicks()
    final elapsedTicks = endTicks - startTicks
    if TICKS_PER_FRAME > elapsedTicks:
      sdl.delay((TICKS_PER_FRAME - elapsedTicks) // 1)

eventLoop()
