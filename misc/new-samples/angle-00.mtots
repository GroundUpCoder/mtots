import sdl
import opengles3 as gl

final SCREEN_WIDTH = 640
final SCREEN_HEIGHT = 480

final kVS = r"""
attribute vec4 vPosition;
void main() {
  gl_Position = vPosition;
}
"""

final kFS = r"""
precision mediump float;
void main() {
  gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);
}
"""

var mainProgram
var mainBuffer

def compileShader(typ, source):
  final shader = gl.createShader(typ)

  gl.shaderSource(shader, source)
  gl.compileShader(shader)

  if gl.getShaderiv(shader, gl.COMPILE_STATUS) == 0:
    print('shader compilation failed: %s' % [gl.getShaderInfoLog()])

  return shader

def checkLinkStatusAndReturnProgram(program):
  if gl.getError() != gl.NO_ERROR:
    return 0

  if gl.getProgramiv(program, gl.LINK_STATUS) == 0:
    print('program link failed: %s' % [
      gl.getProgramInfoLog()])

    gl.deleteProgram(program)
    return 0

  return program

def compileProgram(vsSource, fsSource):
  final vs = compileShader(gl.VERTEX_SHADER, vsSource)
  final fs = compileShader(gl.FRAGMENT_SHADER, fsSource)

  if vs == 0 or fs == 0:
    gl.deleteShader(fs)
    gl.deleteShader(vs)
    return 0

  final program = gl.createProgram()

  gl.attachShader(program, vs)
  gl.deleteShader(vs)

  gl.attachShader(program, fs)
  gl.deleteShader(fs)

  gl.linkProgram(program)

  return checkLinkStatusAndReturnProgram(program)

def initialize():
  final vertexData = [
    0.0, 0.5, 0.0,
    -0.5, -0.5, 0.0,
    0.5, -0.5, 0.0,
  ]
  final vertices = ByteArray(4 * len(vertexData))
  for i in range(len(vertexData)):
    vertices.f32(4 * i, vertexData[i])

  mainProgram = compileProgram(kVS, kFS)
  if mainProgram == 0:
    return 0

  gl.clearColor(0, 0.3, 0, 0)

  mainBuffer = gl.genBuffer()
  gl.bindBuffer(gl.ARRAY_BUFFER, mainBuffer)
  gl.bufferData(gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW)

final dim = sdl.Point(0, 0)

def draw(window):
  sdl.gl.getDrawableSize(window, dim)
  print('width = %r, height = %r' % [dim.x, dim.y])
  gl.viewport(0, 0, dim.x, dim.y)

  gl.clear(gl.COLOR_BUFFER_BIT)

  gl.useProgram(mainProgram)

  gl.vertexAttribPointer(0, 3, gl.FLOAT, gl.FALSE, 0, 0)
  gl.enableVertexAttribArray(0)

  gl.drawArrays(gl.TRIANGLES, 0, 3)

def main():
  sdl.init()

  sdl.gl.setAttribute(sdl.gl.CONTEXT_PROFILE_MASK, sdl.gl.CONTEXT_PROFILE_ES)
  sdl.gl.setAttribute(sdl.gl.CONTEXT_MAJOR_VERSION, 3)
  sdl.gl.setAttribute(sdl.gl.CONTEXT_MINOR_VERSION, 0)

  final window = sdl.createWindow(
    "ANGLE mtots test",
    sdl.WINDOWPOS_CENTERED, sdl.WINDOWPOS_CENTERED,
    SCREEN_WIDTH, SCREEN_HEIGHT,
    sdl.WINDOW_OPENGL|sdl.WINDOW_ALLOW_HIGHDPI)

  if !sdl.gl.createContext(window):
    print("SDL_GL_CreateContext failed: %s" % [sdl.getError()])

  final version = gl.getString(gl.VERSION)
  print('version = %s' % [version])

  initialize()
  draw(window)
  sdl.gl.swapWindow(window)

  final e = sdl.Event()
  var quit = 0
  while quit == 0:
    while sdl.pollEvent(e):
      if e.type == sdl.QUIT:
        quit = 1
    sdl.delay(16)

main()
