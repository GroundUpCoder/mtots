#ifndef mtots_m_opengles3_gen_h
#define mtots_m_opengles3_gen_h
/* Autogenerated and should only be included exactly
 * once by mtots_m_opengles3.c
 *
 * Not all functions are included, but all functions that have
 * non-pointer scalar argument and return values are included.
 *
 * See `misc/codegen/gl3/gen.py` for more info on how this file
 * was generated */
#include "mtots_m_opengles3.h"
#include "mtots_vm.h"
#include <GLES3/gl3.h>

static ubool implActiveTexture(i16 argCount, Value *args, Value *out) {
  u32 texture = AS_U32(args[0]);
  glActiveTexture(texture);
  return UTRUE;
}
static TypePattern argsActiveTexture[] = {
  { TYPE_PATTERN_NUMBER },
};
static CFunction funcActiveTexture = {
  implActiveTexture, "activeTexture",
  sizeof(argsActiveTexture)/sizeof(TypePattern), 0, argsActiveTexture,
};
static ubool implAttachShader(i16 argCount, Value *args, Value *out) {
  u32 program = AS_U32(args[0]);
  u32 shader = AS_U32(args[1]);
  glAttachShader(program, shader);
  return UTRUE;
}
static TypePattern argsAttachShader[] = {
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
};
static CFunction funcAttachShader = {
  implAttachShader, "attachShader",
  sizeof(argsAttachShader)/sizeof(TypePattern), 0, argsAttachShader,
};
static ubool implBindAttribLocation(i16 argCount, Value *args, Value *out) {
  u32 program = AS_U32(args[0]);
  u32 index = AS_U32(args[1]);
  const char *name = AS_STRING(args[2])->chars;
  glBindAttribLocation(program, index, name);
  return UTRUE;
}
static TypePattern argsBindAttribLocation[] = {
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_STRING },
};
static CFunction funcBindAttribLocation = {
  implBindAttribLocation, "bindAttribLocation",
  sizeof(argsBindAttribLocation)/sizeof(TypePattern), 0, argsBindAttribLocation,
};
static ubool implBindBuffer(i16 argCount, Value *args, Value *out) {
  u32 target = AS_U32(args[0]);
  u32 buffer = AS_U32(args[1]);
  glBindBuffer(target, buffer);
  return UTRUE;
}
static TypePattern argsBindBuffer[] = {
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
};
static CFunction funcBindBuffer = {
  implBindBuffer, "bindBuffer",
  sizeof(argsBindBuffer)/sizeof(TypePattern), 0, argsBindBuffer,
};
static ubool implBindFramebuffer(i16 argCount, Value *args, Value *out) {
  u32 target = AS_U32(args[0]);
  u32 framebuffer = AS_U32(args[1]);
  glBindFramebuffer(target, framebuffer);
  return UTRUE;
}
static TypePattern argsBindFramebuffer[] = {
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
};
static CFunction funcBindFramebuffer = {
  implBindFramebuffer, "bindFramebuffer",
  sizeof(argsBindFramebuffer)/sizeof(TypePattern), 0, argsBindFramebuffer,
};
static ubool implBindRenderbuffer(i16 argCount, Value *args, Value *out) {
  u32 target = AS_U32(args[0]);
  u32 renderbuffer = AS_U32(args[1]);
  glBindRenderbuffer(target, renderbuffer);
  return UTRUE;
}
static TypePattern argsBindRenderbuffer[] = {
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
};
static CFunction funcBindRenderbuffer = {
  implBindRenderbuffer, "bindRenderbuffer",
  sizeof(argsBindRenderbuffer)/sizeof(TypePattern), 0, argsBindRenderbuffer,
};
static ubool implBindTexture(i16 argCount, Value *args, Value *out) {
  u32 target = AS_U32(args[0]);
  u32 texture = AS_U32(args[1]);
  glBindTexture(target, texture);
  return UTRUE;
}
static TypePattern argsBindTexture[] = {
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
};
static CFunction funcBindTexture = {
  implBindTexture, "bindTexture",
  sizeof(argsBindTexture)/sizeof(TypePattern), 0, argsBindTexture,
};
static ubool implBlendColor(i16 argCount, Value *args, Value *out) {
  float red = (float)AS_NUMBER(args[0]);
  float green = (float)AS_NUMBER(args[1]);
  float blue = (float)AS_NUMBER(args[2]);
  float alpha = (float)AS_NUMBER(args[3]);
  glBlendColor(red, green, blue, alpha);
  return UTRUE;
}
static TypePattern argsBlendColor[] = {
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
};
static CFunction funcBlendColor = {
  implBlendColor, "blendColor",
  sizeof(argsBlendColor)/sizeof(TypePattern), 0, argsBlendColor,
};
static ubool implBlendEquation(i16 argCount, Value *args, Value *out) {
  u32 mode = AS_U32(args[0]);
  glBlendEquation(mode);
  return UTRUE;
}
static TypePattern argsBlendEquation[] = {
  { TYPE_PATTERN_NUMBER },
};
static CFunction funcBlendEquation = {
  implBlendEquation, "blendEquation",
  sizeof(argsBlendEquation)/sizeof(TypePattern), 0, argsBlendEquation,
};
static ubool implBlendEquationSeparate(i16 argCount, Value *args, Value *out) {
  u32 modeRGB = AS_U32(args[0]);
  u32 modeAlpha = AS_U32(args[1]);
  glBlendEquationSeparate(modeRGB, modeAlpha);
  return UTRUE;
}
static TypePattern argsBlendEquationSeparate[] = {
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
};
static CFunction funcBlendEquationSeparate = {
  implBlendEquationSeparate, "blendEquationSeparate",
  sizeof(argsBlendEquationSeparate)/sizeof(TypePattern), 0, argsBlendEquationSeparate,
};
static ubool implBlendFunc(i16 argCount, Value *args, Value *out) {
  u32 sfactor = AS_U32(args[0]);
  u32 dfactor = AS_U32(args[1]);
  glBlendFunc(sfactor, dfactor);
  return UTRUE;
}
static TypePattern argsBlendFunc[] = {
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
};
static CFunction funcBlendFunc = {
  implBlendFunc, "blendFunc",
  sizeof(argsBlendFunc)/sizeof(TypePattern), 0, argsBlendFunc,
};
static ubool implBlendFuncSeparate(i16 argCount, Value *args, Value *out) {
  u32 sfactorRGB = AS_U32(args[0]);
  u32 dfactorRGB = AS_U32(args[1]);
  u32 sfactorAlpha = AS_U32(args[2]);
  u32 dfactorAlpha = AS_U32(args[3]);
  glBlendFuncSeparate(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);
  return UTRUE;
}
static TypePattern argsBlendFuncSeparate[] = {
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
};
static CFunction funcBlendFuncSeparate = {
  implBlendFuncSeparate, "blendFuncSeparate",
  sizeof(argsBlendFuncSeparate)/sizeof(TypePattern), 0, argsBlendFuncSeparate,
};
static ubool implCheckFramebufferStatus(i16 argCount, Value *args, Value *out) {
  u32 target = AS_U32(args[0]);
  *out = NUMBER_VAL(glCheckFramebufferStatus(target));
  return UTRUE;
}
static TypePattern argsCheckFramebufferStatus[] = {
  { TYPE_PATTERN_NUMBER },
};
static CFunction funcCheckFramebufferStatus = {
  implCheckFramebufferStatus, "checkFramebufferStatus",
  sizeof(argsCheckFramebufferStatus)/sizeof(TypePattern), 0, argsCheckFramebufferStatus,
};
static ubool implClear(i16 argCount, Value *args, Value *out) {
  u32 mask = AS_U32(args[0]);
  glClear(mask);
  return UTRUE;
}
static TypePattern argsClear[] = {
  { TYPE_PATTERN_NUMBER },
};
static CFunction funcClear = {
  implClear, "clear",
  sizeof(argsClear)/sizeof(TypePattern), 0, argsClear,
};
static ubool implClearColor(i16 argCount, Value *args, Value *out) {
  float red = (float)AS_NUMBER(args[0]);
  float green = (float)AS_NUMBER(args[1]);
  float blue = (float)AS_NUMBER(args[2]);
  float alpha = (float)AS_NUMBER(args[3]);
  glClearColor(red, green, blue, alpha);
  return UTRUE;
}
static TypePattern argsClearColor[] = {
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
};
static CFunction funcClearColor = {
  implClearColor, "clearColor",
  sizeof(argsClearColor)/sizeof(TypePattern), 0, argsClearColor,
};
static ubool implClearDepthf(i16 argCount, Value *args, Value *out) {
  float d = (float)AS_NUMBER(args[0]);
  glClearDepthf(d);
  return UTRUE;
}
static TypePattern argsClearDepthf[] = {
  { TYPE_PATTERN_NUMBER },
};
static CFunction funcClearDepthf = {
  implClearDepthf, "clearDepthf",
  sizeof(argsClearDepthf)/sizeof(TypePattern), 0, argsClearDepthf,
};
static ubool implClearStencil(i16 argCount, Value *args, Value *out) {
  i32 s = AS_I32(args[0]);
  glClearStencil(s);
  return UTRUE;
}
static TypePattern argsClearStencil[] = {
  { TYPE_PATTERN_NUMBER },
};
static CFunction funcClearStencil = {
  implClearStencil, "clearStencil",
  sizeof(argsClearStencil)/sizeof(TypePattern), 0, argsClearStencil,
};
static ubool implColorMask(i16 argCount, Value *args, Value *out) {
  ubool red = AS_BOOL(args[0]);
  ubool green = AS_BOOL(args[1]);
  ubool blue = AS_BOOL(args[2]);
  ubool alpha = AS_BOOL(args[3]);
  glColorMask(red, green, blue, alpha);
  return UTRUE;
}
static TypePattern argsColorMask[] = {
  { TYPE_PATTERN_BOOL },
  { TYPE_PATTERN_BOOL },
  { TYPE_PATTERN_BOOL },
  { TYPE_PATTERN_BOOL },
};
static CFunction funcColorMask = {
  implColorMask, "colorMask",
  sizeof(argsColorMask)/sizeof(TypePattern), 0, argsColorMask,
};
static ubool implCompileShader(i16 argCount, Value *args, Value *out) {
  u32 shader = AS_U32(args[0]);
  glCompileShader(shader);
  return UTRUE;
}
static TypePattern argsCompileShader[] = {
  { TYPE_PATTERN_NUMBER },
};
static CFunction funcCompileShader = {
  implCompileShader, "compileShader",
  sizeof(argsCompileShader)/sizeof(TypePattern), 0, argsCompileShader,
};
static ubool implCopyTexImage2D(i16 argCount, Value *args, Value *out) {
  u32 target = AS_U32(args[0]);
  i32 level = AS_I32(args[1]);
  u32 internalformat = AS_U32(args[2]);
  i32 x = AS_I32(args[3]);
  i32 y = AS_I32(args[4]);
  i32 width = AS_I32(args[5]);
  i32 height = AS_I32(args[6]);
  i32 border = AS_I32(args[7]);
  glCopyTexImage2D(target, level, internalformat, x, y, width, height, border);
  return UTRUE;
}
static TypePattern argsCopyTexImage2D[] = {
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
};
static CFunction funcCopyTexImage2D = {
  implCopyTexImage2D, "copyTexImage2D",
  sizeof(argsCopyTexImage2D)/sizeof(TypePattern), 0, argsCopyTexImage2D,
};
static ubool implCopyTexSubImage2D(i16 argCount, Value *args, Value *out) {
  u32 target = AS_U32(args[0]);
  i32 level = AS_I32(args[1]);
  i32 xoffset = AS_I32(args[2]);
  i32 yoffset = AS_I32(args[3]);
  i32 x = AS_I32(args[4]);
  i32 y = AS_I32(args[5]);
  i32 width = AS_I32(args[6]);
  i32 height = AS_I32(args[7]);
  glCopyTexSubImage2D(target, level, xoffset, yoffset, x, y, width, height);
  return UTRUE;
}
static TypePattern argsCopyTexSubImage2D[] = {
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
};
static CFunction funcCopyTexSubImage2D = {
  implCopyTexSubImage2D, "copyTexSubImage2D",
  sizeof(argsCopyTexSubImage2D)/sizeof(TypePattern), 0, argsCopyTexSubImage2D,
};
static ubool implCreateProgram(i16 argCount, Value *args, Value *out) {
  *out = NUMBER_VAL(glCreateProgram());
  return UTRUE;
}
static CFunction funcCreateProgram = {
  implCreateProgram, "createProgram",
};
static ubool implCreateShader(i16 argCount, Value *args, Value *out) {
  u32 type = AS_U32(args[0]);
  *out = NUMBER_VAL(glCreateShader(type));
  return UTRUE;
}
static TypePattern argsCreateShader[] = {
  { TYPE_PATTERN_NUMBER },
};
static CFunction funcCreateShader = {
  implCreateShader, "createShader",
  sizeof(argsCreateShader)/sizeof(TypePattern), 0, argsCreateShader,
};
static ubool implCullFace(i16 argCount, Value *args, Value *out) {
  u32 mode = AS_U32(args[0]);
  glCullFace(mode);
  return UTRUE;
}
static TypePattern argsCullFace[] = {
  { TYPE_PATTERN_NUMBER },
};
static CFunction funcCullFace = {
  implCullFace, "cullFace",
  sizeof(argsCullFace)/sizeof(TypePattern), 0, argsCullFace,
};
static ubool implDeleteBuffer(i16 argCount, Value *args, Value *out) {
  GLuint value = AS_U32(args[0]);
  glDeleteBuffers(1, &value);
  return UTRUE;
}
static TypePattern argsDeleteBuffer[] = {
  { TYPE_PATTERN_NUMBER },
};
static CFunction funcDeleteBuffer = {
  implDeleteBuffer, "deleteBuffer",
  sizeof(argsDeleteBuffer)/sizeof(TypePattern), 0, argsDeleteBuffer,
};
static ubool implDeleteFramebuffer(i16 argCount, Value *args, Value *out) {
  GLuint value = AS_U32(args[0]);
  glDeleteFramebuffers(1, &value);
  return UTRUE;
}
static TypePattern argsDeleteFramebuffer[] = {
  { TYPE_PATTERN_NUMBER },
};
static CFunction funcDeleteFramebuffer = {
  implDeleteFramebuffer, "deleteFramebuffer",
  sizeof(argsDeleteFramebuffer)/sizeof(TypePattern), 0, argsDeleteFramebuffer,
};
static ubool implDeleteProgram(i16 argCount, Value *args, Value *out) {
  u32 program = AS_U32(args[0]);
  glDeleteProgram(program);
  return UTRUE;
}
static TypePattern argsDeleteProgram[] = {
  { TYPE_PATTERN_NUMBER },
};
static CFunction funcDeleteProgram = {
  implDeleteProgram, "deleteProgram",
  sizeof(argsDeleteProgram)/sizeof(TypePattern), 0, argsDeleteProgram,
};
static ubool implDeleteRenderbuffer(i16 argCount, Value *args, Value *out) {
  GLuint value = AS_U32(args[0]);
  glDeleteRenderbuffers(1, &value);
  return UTRUE;
}
static TypePattern argsDeleteRenderbuffer[] = {
  { TYPE_PATTERN_NUMBER },
};
static CFunction funcDeleteRenderbuffer = {
  implDeleteRenderbuffer, "deleteRenderbuffer",
  sizeof(argsDeleteRenderbuffer)/sizeof(TypePattern), 0, argsDeleteRenderbuffer,
};
static ubool implDeleteShader(i16 argCount, Value *args, Value *out) {
  u32 shader = AS_U32(args[0]);
  glDeleteShader(shader);
  return UTRUE;
}
static TypePattern argsDeleteShader[] = {
  { TYPE_PATTERN_NUMBER },
};
static CFunction funcDeleteShader = {
  implDeleteShader, "deleteShader",
  sizeof(argsDeleteShader)/sizeof(TypePattern), 0, argsDeleteShader,
};
static ubool implDeleteTexture(i16 argCount, Value *args, Value *out) {
  GLuint value = AS_U32(args[0]);
  glDeleteTextures(1, &value);
  return UTRUE;
}
static TypePattern argsDeleteTexture[] = {
  { TYPE_PATTERN_NUMBER },
};
static CFunction funcDeleteTexture = {
  implDeleteTexture, "deleteTexture",
  sizeof(argsDeleteTexture)/sizeof(TypePattern), 0, argsDeleteTexture,
};
static ubool implDepthFunc(i16 argCount, Value *args, Value *out) {
  u32 func = AS_U32(args[0]);
  glDepthFunc(func);
  return UTRUE;
}
static TypePattern argsDepthFunc[] = {
  { TYPE_PATTERN_NUMBER },
};
static CFunction funcDepthFunc = {
  implDepthFunc, "depthFunc",
  sizeof(argsDepthFunc)/sizeof(TypePattern), 0, argsDepthFunc,
};
static ubool implDepthMask(i16 argCount, Value *args, Value *out) {
  ubool flag = AS_BOOL(args[0]);
  glDepthMask(flag);
  return UTRUE;
}
static TypePattern argsDepthMask[] = {
  { TYPE_PATTERN_BOOL },
};
static CFunction funcDepthMask = {
  implDepthMask, "depthMask",
  sizeof(argsDepthMask)/sizeof(TypePattern), 0, argsDepthMask,
};
static ubool implDepthRangef(i16 argCount, Value *args, Value *out) {
  float n = (float)AS_NUMBER(args[0]);
  float f = (float)AS_NUMBER(args[1]);
  glDepthRangef(n, f);
  return UTRUE;
}
static TypePattern argsDepthRangef[] = {
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
};
static CFunction funcDepthRangef = {
  implDepthRangef, "depthRangef",
  sizeof(argsDepthRangef)/sizeof(TypePattern), 0, argsDepthRangef,
};
static ubool implDetachShader(i16 argCount, Value *args, Value *out) {
  u32 program = AS_U32(args[0]);
  u32 shader = AS_U32(args[1]);
  glDetachShader(program, shader);
  return UTRUE;
}
static TypePattern argsDetachShader[] = {
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
};
static CFunction funcDetachShader = {
  implDetachShader, "detachShader",
  sizeof(argsDetachShader)/sizeof(TypePattern), 0, argsDetachShader,
};
static ubool implDisable(i16 argCount, Value *args, Value *out) {
  u32 cap = AS_U32(args[0]);
  glDisable(cap);
  return UTRUE;
}
static TypePattern argsDisable[] = {
  { TYPE_PATTERN_NUMBER },
};
static CFunction funcDisable = {
  implDisable, "disable",
  sizeof(argsDisable)/sizeof(TypePattern), 0, argsDisable,
};
static ubool implDisableVertexAttribArray(i16 argCount, Value *args, Value *out) {
  u32 index = AS_U32(args[0]);
  glDisableVertexAttribArray(index);
  return UTRUE;
}
static TypePattern argsDisableVertexAttribArray[] = {
  { TYPE_PATTERN_NUMBER },
};
static CFunction funcDisableVertexAttribArray = {
  implDisableVertexAttribArray, "disableVertexAttribArray",
  sizeof(argsDisableVertexAttribArray)/sizeof(TypePattern), 0, argsDisableVertexAttribArray,
};
static ubool implDrawArrays(i16 argCount, Value *args, Value *out) {
  u32 mode = AS_U32(args[0]);
  i32 first = AS_I32(args[1]);
  i32 count = AS_I32(args[2]);
  glDrawArrays(mode, first, count);
  return UTRUE;
}
static TypePattern argsDrawArrays[] = {
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
};
static CFunction funcDrawArrays = {
  implDrawArrays, "drawArrays",
  sizeof(argsDrawArrays)/sizeof(TypePattern), 0, argsDrawArrays,
};
static ubool implDrawElements(i16 argCount, Value *args, Value *out) {
  u32 mode = AS_U32(args[0]);
  i32 count = AS_I32(args[1]);
  u32 type = AS_U32(args[2]);
  const void *indices = (void*)(size_t)AS_NUMBER(args[3]);
  glDrawElements(mode, count, type, indices);
  return UTRUE;
}
static TypePattern argsDrawElements[] = {
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
};
static CFunction funcDrawElements = {
  implDrawElements, "drawElements",
  sizeof(argsDrawElements)/sizeof(TypePattern), 0, argsDrawElements,
};
static ubool implEnable(i16 argCount, Value *args, Value *out) {
  u32 cap = AS_U32(args[0]);
  glEnable(cap);
  return UTRUE;
}
static TypePattern argsEnable[] = {
  { TYPE_PATTERN_NUMBER },
};
static CFunction funcEnable = {
  implEnable, "enable",
  sizeof(argsEnable)/sizeof(TypePattern), 0, argsEnable,
};
static ubool implEnableVertexAttribArray(i16 argCount, Value *args, Value *out) {
  u32 index = AS_U32(args[0]);
  glEnableVertexAttribArray(index);
  return UTRUE;
}
static TypePattern argsEnableVertexAttribArray[] = {
  { TYPE_PATTERN_NUMBER },
};
static CFunction funcEnableVertexAttribArray = {
  implEnableVertexAttribArray, "enableVertexAttribArray",
  sizeof(argsEnableVertexAttribArray)/sizeof(TypePattern), 0, argsEnableVertexAttribArray,
};
static ubool implFinish(i16 argCount, Value *args, Value *out) {
  glFinish();
  return UTRUE;
}
static CFunction funcFinish = {
  implFinish, "finish",
};
static ubool implFlush(i16 argCount, Value *args, Value *out) {
  glFlush();
  return UTRUE;
}
static CFunction funcFlush = {
  implFlush, "flush",
};
static ubool implFramebufferRenderbuffer(i16 argCount, Value *args, Value *out) {
  u32 target = AS_U32(args[0]);
  u32 attachment = AS_U32(args[1]);
  u32 renderbuffertarget = AS_U32(args[2]);
  u32 renderbuffer = AS_U32(args[3]);
  glFramebufferRenderbuffer(target, attachment, renderbuffertarget, renderbuffer);
  return UTRUE;
}
static TypePattern argsFramebufferRenderbuffer[] = {
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
};
static CFunction funcFramebufferRenderbuffer = {
  implFramebufferRenderbuffer, "framebufferRenderbuffer",
  sizeof(argsFramebufferRenderbuffer)/sizeof(TypePattern), 0, argsFramebufferRenderbuffer,
};
static ubool implFramebufferTexture2D(i16 argCount, Value *args, Value *out) {
  u32 target = AS_U32(args[0]);
  u32 attachment = AS_U32(args[1]);
  u32 textarget = AS_U32(args[2]);
  u32 texture = AS_U32(args[3]);
  i32 level = AS_I32(args[4]);
  glFramebufferTexture2D(target, attachment, textarget, texture, level);
  return UTRUE;
}
static TypePattern argsFramebufferTexture2D[] = {
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
};
static CFunction funcFramebufferTexture2D = {
  implFramebufferTexture2D, "framebufferTexture2D",
  sizeof(argsFramebufferTexture2D)/sizeof(TypePattern), 0, argsFramebufferTexture2D,
};
static ubool implFrontFace(i16 argCount, Value *args, Value *out) {
  u32 mode = AS_U32(args[0]);
  glFrontFace(mode);
  return UTRUE;
}
static TypePattern argsFrontFace[] = {
  { TYPE_PATTERN_NUMBER },
};
static CFunction funcFrontFace = {
  implFrontFace, "frontFace",
  sizeof(argsFrontFace)/sizeof(TypePattern), 0, argsFrontFace,
};
static ubool implGenBuffer(i16 argCount, Value *args, Value *out) {
  GLuint value;
  glGenBuffers(1, &value);
  *out = NUMBER_VAL(value);
  return UTRUE;
}
static CFunction funcGenBuffer = {
  implGenBuffer, "genBuffer",
};
static ubool implGenerateMipmap(i16 argCount, Value *args, Value *out) {
  u32 target = AS_U32(args[0]);
  glGenerateMipmap(target);
  return UTRUE;
}
static TypePattern argsGenerateMipmap[] = {
  { TYPE_PATTERN_NUMBER },
};
static CFunction funcGenerateMipmap = {
  implGenerateMipmap, "generateMipmap",
  sizeof(argsGenerateMipmap)/sizeof(TypePattern), 0, argsGenerateMipmap,
};
static ubool implGenFramebuffer(i16 argCount, Value *args, Value *out) {
  GLuint value;
  glGenFramebuffers(1, &value);
  *out = NUMBER_VAL(value);
  return UTRUE;
}
static CFunction funcGenFramebuffer = {
  implGenFramebuffer, "genFramebuffer",
};
static ubool implGenRenderbuffer(i16 argCount, Value *args, Value *out) {
  GLuint value;
  glGenRenderbuffers(1, &value);
  *out = NUMBER_VAL(value);
  return UTRUE;
}
static CFunction funcGenRenderbuffer = {
  implGenRenderbuffer, "genRenderbuffer",
};
static ubool implGenTexture(i16 argCount, Value *args, Value *out) {
  GLuint value;
  glGenTextures(1, &value);
  *out = NUMBER_VAL(value);
  return UTRUE;
}
static CFunction funcGenTexture = {
  implGenTexture, "genTexture",
};
static ubool implGetAttribLocation(i16 argCount, Value *args, Value *out) {
  u32 program = AS_U32(args[0]);
  const char *name = AS_STRING(args[1])->chars;
  *out = NUMBER_VAL(glGetAttribLocation(program, name));
  return UTRUE;
}
static TypePattern argsGetAttribLocation[] = {
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_STRING },
};
static CFunction funcGetAttribLocation = {
  implGetAttribLocation, "getAttribLocation",
  sizeof(argsGetAttribLocation)/sizeof(TypePattern), 0, argsGetAttribLocation,
};
static ubool implGetBufferParameteriv(i16 argCount, Value *args, Value *out) {
  u32 target = AS_U32(args[0]);
  u32 pname = AS_U32(args[1]);
  GLint params;
  glGetBufferParameteriv(target, pname, &params);
  *out = NUMBER_VAL(params);
  return UTRUE;
}
static TypePattern argsGetBufferParameteriv[] = {
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
};
static CFunction funcGetBufferParameteriv = {
  implGetBufferParameteriv, "getBufferParameteriv",
  sizeof(argsGetBufferParameteriv)/sizeof(TypePattern), 0, argsGetBufferParameteriv,
};
static ubool implGetError(i16 argCount, Value *args, Value *out) {
  *out = NUMBER_VAL(glGetError());
  return UTRUE;
}
static CFunction funcGetError = {
  implGetError, "getError",
};
static ubool implGetFramebufferAttachmentParameteriv(i16 argCount, Value *args, Value *out) {
  u32 target = AS_U32(args[0]);
  u32 attachment = AS_U32(args[1]);
  u32 pname = AS_U32(args[2]);
  GLint params;
  glGetFramebufferAttachmentParameteriv(target, attachment, pname, &params);
  *out = NUMBER_VAL(params);
  return UTRUE;
}
static TypePattern argsGetFramebufferAttachmentParameteriv[] = {
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
};
static CFunction funcGetFramebufferAttachmentParameteriv = {
  implGetFramebufferAttachmentParameteriv, "getFramebufferAttachmentParameteriv",
  sizeof(argsGetFramebufferAttachmentParameteriv)/sizeof(TypePattern), 0, argsGetFramebufferAttachmentParameteriv,
};
static ubool implGetProgramiv(i16 argCount, Value *args, Value *out) {
  u32 program = AS_U32(args[0]);
  u32 pname = AS_U32(args[1]);
  GLint params;
  glGetProgramiv(program, pname, &params);
  *out = NUMBER_VAL(params);
  return UTRUE;
}
static TypePattern argsGetProgramiv[] = {
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
};
static CFunction funcGetProgramiv = {
  implGetProgramiv, "getProgramiv",
  sizeof(argsGetProgramiv)/sizeof(TypePattern), 0, argsGetProgramiv,
};
static ubool implGetRenderbufferParameteriv(i16 argCount, Value *args, Value *out) {
  u32 target = AS_U32(args[0]);
  u32 pname = AS_U32(args[1]);
  GLint params;
  glGetRenderbufferParameteriv(target, pname, &params);
  *out = NUMBER_VAL(params);
  return UTRUE;
}
static TypePattern argsGetRenderbufferParameteriv[] = {
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
};
static CFunction funcGetRenderbufferParameteriv = {
  implGetRenderbufferParameteriv, "getRenderbufferParameteriv",
  sizeof(argsGetRenderbufferParameteriv)/sizeof(TypePattern), 0, argsGetRenderbufferParameteriv,
};
static ubool implGetShaderiv(i16 argCount, Value *args, Value *out) {
  u32 shader = AS_U32(args[0]);
  u32 pname = AS_U32(args[1]);
  GLint params;
  glGetShaderiv(shader, pname, &params);
  *out = NUMBER_VAL(params);
  return UTRUE;
}
static TypePattern argsGetShaderiv[] = {
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
};
static CFunction funcGetShaderiv = {
  implGetShaderiv, "getShaderiv",
  sizeof(argsGetShaderiv)/sizeof(TypePattern), 0, argsGetShaderiv,
};
static ubool implGetTexParameterfv(i16 argCount, Value *args, Value *out) {
  u32 target = AS_U32(args[0]);
  u32 pname = AS_U32(args[1]);
  GLfloat params;
  glGetTexParameterfv(target, pname, &params);
  *out = NUMBER_VAL(params);
  return UTRUE;
}
static TypePattern argsGetTexParameterfv[] = {
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
};
static CFunction funcGetTexParameterfv = {
  implGetTexParameterfv, "getTexParameterfv",
  sizeof(argsGetTexParameterfv)/sizeof(TypePattern), 0, argsGetTexParameterfv,
};
static ubool implGetTexParameteriv(i16 argCount, Value *args, Value *out) {
  u32 target = AS_U32(args[0]);
  u32 pname = AS_U32(args[1]);
  GLint params;
  glGetTexParameteriv(target, pname, &params);
  *out = NUMBER_VAL(params);
  return UTRUE;
}
static TypePattern argsGetTexParameteriv[] = {
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
};
static CFunction funcGetTexParameteriv = {
  implGetTexParameteriv, "getTexParameteriv",
  sizeof(argsGetTexParameteriv)/sizeof(TypePattern), 0, argsGetTexParameteriv,
};
static ubool implGetUniformfv(i16 argCount, Value *args, Value *out) {
  u32 program = AS_U32(args[0]);
  i32 location = AS_I32(args[1]);
  GLfloat params;
  glGetUniformfv(program, location, &params);
  *out = NUMBER_VAL(params);
  return UTRUE;
}
static TypePattern argsGetUniformfv[] = {
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
};
static CFunction funcGetUniformfv = {
  implGetUniformfv, "getUniformfv",
  sizeof(argsGetUniformfv)/sizeof(TypePattern), 0, argsGetUniformfv,
};
static ubool implGetUniformiv(i16 argCount, Value *args, Value *out) {
  u32 program = AS_U32(args[0]);
  i32 location = AS_I32(args[1]);
  GLint params;
  glGetUniformiv(program, location, &params);
  *out = NUMBER_VAL(params);
  return UTRUE;
}
static TypePattern argsGetUniformiv[] = {
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
};
static CFunction funcGetUniformiv = {
  implGetUniformiv, "getUniformiv",
  sizeof(argsGetUniformiv)/sizeof(TypePattern), 0, argsGetUniformiv,
};
static ubool implGetUniformLocation(i16 argCount, Value *args, Value *out) {
  u32 program = AS_U32(args[0]);
  const char *name = AS_STRING(args[1])->chars;
  *out = NUMBER_VAL(glGetUniformLocation(program, name));
  return UTRUE;
}
static TypePattern argsGetUniformLocation[] = {
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_STRING },
};
static CFunction funcGetUniformLocation = {
  implGetUniformLocation, "getUniformLocation",
  sizeof(argsGetUniformLocation)/sizeof(TypePattern), 0, argsGetUniformLocation,
};
static ubool implGetVertexAttribfv(i16 argCount, Value *args, Value *out) {
  u32 index = AS_U32(args[0]);
  u32 pname = AS_U32(args[1]);
  GLfloat params;
  glGetVertexAttribfv(index, pname, &params);
  *out = NUMBER_VAL(params);
  return UTRUE;
}
static TypePattern argsGetVertexAttribfv[] = {
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
};
static CFunction funcGetVertexAttribfv = {
  implGetVertexAttribfv, "getVertexAttribfv",
  sizeof(argsGetVertexAttribfv)/sizeof(TypePattern), 0, argsGetVertexAttribfv,
};
static ubool implGetVertexAttribiv(i16 argCount, Value *args, Value *out) {
  u32 index = AS_U32(args[0]);
  u32 pname = AS_U32(args[1]);
  GLint params;
  glGetVertexAttribiv(index, pname, &params);
  *out = NUMBER_VAL(params);
  return UTRUE;
}
static TypePattern argsGetVertexAttribiv[] = {
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
};
static CFunction funcGetVertexAttribiv = {
  implGetVertexAttribiv, "getVertexAttribiv",
  sizeof(argsGetVertexAttribiv)/sizeof(TypePattern), 0, argsGetVertexAttribiv,
};
static ubool implHint(i16 argCount, Value *args, Value *out) {
  u32 target = AS_U32(args[0]);
  u32 mode = AS_U32(args[1]);
  glHint(target, mode);
  return UTRUE;
}
static TypePattern argsHint[] = {
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
};
static CFunction funcHint = {
  implHint, "hint",
  sizeof(argsHint)/sizeof(TypePattern), 0, argsHint,
};
static ubool implIsBuffer(i16 argCount, Value *args, Value *out) {
  u32 buffer = AS_U32(args[0]);
  *out = BOOL_VAL(glIsBuffer(buffer));
  return UTRUE;
}
static TypePattern argsIsBuffer[] = {
  { TYPE_PATTERN_NUMBER },
};
static CFunction funcIsBuffer = {
  implIsBuffer, "isBuffer",
  sizeof(argsIsBuffer)/sizeof(TypePattern), 0, argsIsBuffer,
};
static ubool implIsEnabled(i16 argCount, Value *args, Value *out) {
  u32 cap = AS_U32(args[0]);
  *out = BOOL_VAL(glIsEnabled(cap));
  return UTRUE;
}
static TypePattern argsIsEnabled[] = {
  { TYPE_PATTERN_NUMBER },
};
static CFunction funcIsEnabled = {
  implIsEnabled, "isEnabled",
  sizeof(argsIsEnabled)/sizeof(TypePattern), 0, argsIsEnabled,
};
static ubool implIsFramebuffer(i16 argCount, Value *args, Value *out) {
  u32 framebuffer = AS_U32(args[0]);
  *out = BOOL_VAL(glIsFramebuffer(framebuffer));
  return UTRUE;
}
static TypePattern argsIsFramebuffer[] = {
  { TYPE_PATTERN_NUMBER },
};
static CFunction funcIsFramebuffer = {
  implIsFramebuffer, "isFramebuffer",
  sizeof(argsIsFramebuffer)/sizeof(TypePattern), 0, argsIsFramebuffer,
};
static ubool implIsProgram(i16 argCount, Value *args, Value *out) {
  u32 program = AS_U32(args[0]);
  *out = BOOL_VAL(glIsProgram(program));
  return UTRUE;
}
static TypePattern argsIsProgram[] = {
  { TYPE_PATTERN_NUMBER },
};
static CFunction funcIsProgram = {
  implIsProgram, "isProgram",
  sizeof(argsIsProgram)/sizeof(TypePattern), 0, argsIsProgram,
};
static ubool implIsRenderbuffer(i16 argCount, Value *args, Value *out) {
  u32 renderbuffer = AS_U32(args[0]);
  *out = BOOL_VAL(glIsRenderbuffer(renderbuffer));
  return UTRUE;
}
static TypePattern argsIsRenderbuffer[] = {
  { TYPE_PATTERN_NUMBER },
};
static CFunction funcIsRenderbuffer = {
  implIsRenderbuffer, "isRenderbuffer",
  sizeof(argsIsRenderbuffer)/sizeof(TypePattern), 0, argsIsRenderbuffer,
};
static ubool implIsShader(i16 argCount, Value *args, Value *out) {
  u32 shader = AS_U32(args[0]);
  *out = BOOL_VAL(glIsShader(shader));
  return UTRUE;
}
static TypePattern argsIsShader[] = {
  { TYPE_PATTERN_NUMBER },
};
static CFunction funcIsShader = {
  implIsShader, "isShader",
  sizeof(argsIsShader)/sizeof(TypePattern), 0, argsIsShader,
};
static ubool implIsTexture(i16 argCount, Value *args, Value *out) {
  u32 texture = AS_U32(args[0]);
  *out = BOOL_VAL(glIsTexture(texture));
  return UTRUE;
}
static TypePattern argsIsTexture[] = {
  { TYPE_PATTERN_NUMBER },
};
static CFunction funcIsTexture = {
  implIsTexture, "isTexture",
  sizeof(argsIsTexture)/sizeof(TypePattern), 0, argsIsTexture,
};
static ubool implLineWidth(i16 argCount, Value *args, Value *out) {
  float width = (float)AS_NUMBER(args[0]);
  glLineWidth(width);
  return UTRUE;
}
static TypePattern argsLineWidth[] = {
  { TYPE_PATTERN_NUMBER },
};
static CFunction funcLineWidth = {
  implLineWidth, "lineWidth",
  sizeof(argsLineWidth)/sizeof(TypePattern), 0, argsLineWidth,
};
static ubool implLinkProgram(i16 argCount, Value *args, Value *out) {
  u32 program = AS_U32(args[0]);
  glLinkProgram(program);
  return UTRUE;
}
static TypePattern argsLinkProgram[] = {
  { TYPE_PATTERN_NUMBER },
};
static CFunction funcLinkProgram = {
  implLinkProgram, "linkProgram",
  sizeof(argsLinkProgram)/sizeof(TypePattern), 0, argsLinkProgram,
};
static ubool implPixelStorei(i16 argCount, Value *args, Value *out) {
  u32 pname = AS_U32(args[0]);
  i32 param = AS_I32(args[1]);
  glPixelStorei(pname, param);
  return UTRUE;
}
static TypePattern argsPixelStorei[] = {
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
};
static CFunction funcPixelStorei = {
  implPixelStorei, "pixelStorei",
  sizeof(argsPixelStorei)/sizeof(TypePattern), 0, argsPixelStorei,
};
static ubool implPolygonOffset(i16 argCount, Value *args, Value *out) {
  float factor = (float)AS_NUMBER(args[0]);
  float units = (float)AS_NUMBER(args[1]);
  glPolygonOffset(factor, units);
  return UTRUE;
}
static TypePattern argsPolygonOffset[] = {
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
};
static CFunction funcPolygonOffset = {
  implPolygonOffset, "polygonOffset",
  sizeof(argsPolygonOffset)/sizeof(TypePattern), 0, argsPolygonOffset,
};
static ubool implReleaseShaderCompiler(i16 argCount, Value *args, Value *out) {
  glReleaseShaderCompiler();
  return UTRUE;
}
static CFunction funcReleaseShaderCompiler = {
  implReleaseShaderCompiler, "releaseShaderCompiler",
};
static ubool implRenderbufferStorage(i16 argCount, Value *args, Value *out) {
  u32 target = AS_U32(args[0]);
  u32 internalformat = AS_U32(args[1]);
  i32 width = AS_I32(args[2]);
  i32 height = AS_I32(args[3]);
  glRenderbufferStorage(target, internalformat, width, height);
  return UTRUE;
}
static TypePattern argsRenderbufferStorage[] = {
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
};
static CFunction funcRenderbufferStorage = {
  implRenderbufferStorage, "renderbufferStorage",
  sizeof(argsRenderbufferStorage)/sizeof(TypePattern), 0, argsRenderbufferStorage,
};
static ubool implSampleCoverage(i16 argCount, Value *args, Value *out) {
  float value = (float)AS_NUMBER(args[0]);
  ubool invert = AS_BOOL(args[1]);
  glSampleCoverage(value, invert);
  return UTRUE;
}
static TypePattern argsSampleCoverage[] = {
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_BOOL },
};
static CFunction funcSampleCoverage = {
  implSampleCoverage, "sampleCoverage",
  sizeof(argsSampleCoverage)/sizeof(TypePattern), 0, argsSampleCoverage,
};
static ubool implScissor(i16 argCount, Value *args, Value *out) {
  i32 x = AS_I32(args[0]);
  i32 y = AS_I32(args[1]);
  i32 width = AS_I32(args[2]);
  i32 height = AS_I32(args[3]);
  glScissor(x, y, width, height);
  return UTRUE;
}
static TypePattern argsScissor[] = {
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
};
static CFunction funcScissor = {
  implScissor, "scissor",
  sizeof(argsScissor)/sizeof(TypePattern), 0, argsScissor,
};
static ubool implStencilFunc(i16 argCount, Value *args, Value *out) {
  u32 func = AS_U32(args[0]);
  i32 ref = AS_I32(args[1]);
  u32 mask = AS_U32(args[2]);
  glStencilFunc(func, ref, mask);
  return UTRUE;
}
static TypePattern argsStencilFunc[] = {
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
};
static CFunction funcStencilFunc = {
  implStencilFunc, "stencilFunc",
  sizeof(argsStencilFunc)/sizeof(TypePattern), 0, argsStencilFunc,
};
static ubool implStencilFuncSeparate(i16 argCount, Value *args, Value *out) {
  u32 face = AS_U32(args[0]);
  u32 func = AS_U32(args[1]);
  i32 ref = AS_I32(args[2]);
  u32 mask = AS_U32(args[3]);
  glStencilFuncSeparate(face, func, ref, mask);
  return UTRUE;
}
static TypePattern argsStencilFuncSeparate[] = {
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
};
static CFunction funcStencilFuncSeparate = {
  implStencilFuncSeparate, "stencilFuncSeparate",
  sizeof(argsStencilFuncSeparate)/sizeof(TypePattern), 0, argsStencilFuncSeparate,
};
static ubool implStencilMask(i16 argCount, Value *args, Value *out) {
  u32 mask = AS_U32(args[0]);
  glStencilMask(mask);
  return UTRUE;
}
static TypePattern argsStencilMask[] = {
  { TYPE_PATTERN_NUMBER },
};
static CFunction funcStencilMask = {
  implStencilMask, "stencilMask",
  sizeof(argsStencilMask)/sizeof(TypePattern), 0, argsStencilMask,
};
static ubool implStencilMaskSeparate(i16 argCount, Value *args, Value *out) {
  u32 face = AS_U32(args[0]);
  u32 mask = AS_U32(args[1]);
  glStencilMaskSeparate(face, mask);
  return UTRUE;
}
static TypePattern argsStencilMaskSeparate[] = {
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
};
static CFunction funcStencilMaskSeparate = {
  implStencilMaskSeparate, "stencilMaskSeparate",
  sizeof(argsStencilMaskSeparate)/sizeof(TypePattern), 0, argsStencilMaskSeparate,
};
static ubool implStencilOp(i16 argCount, Value *args, Value *out) {
  u32 fail = AS_U32(args[0]);
  u32 zfail = AS_U32(args[1]);
  u32 zpass = AS_U32(args[2]);
  glStencilOp(fail, zfail, zpass);
  return UTRUE;
}
static TypePattern argsStencilOp[] = {
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
};
static CFunction funcStencilOp = {
  implStencilOp, "stencilOp",
  sizeof(argsStencilOp)/sizeof(TypePattern), 0, argsStencilOp,
};
static ubool implStencilOpSeparate(i16 argCount, Value *args, Value *out) {
  u32 face = AS_U32(args[0]);
  u32 sfail = AS_U32(args[1]);
  u32 dpfail = AS_U32(args[2]);
  u32 dppass = AS_U32(args[3]);
  glStencilOpSeparate(face, sfail, dpfail, dppass);
  return UTRUE;
}
static TypePattern argsStencilOpSeparate[] = {
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
};
static CFunction funcStencilOpSeparate = {
  implStencilOpSeparate, "stencilOpSeparate",
  sizeof(argsStencilOpSeparate)/sizeof(TypePattern), 0, argsStencilOpSeparate,
};
static ubool implTexParameterf(i16 argCount, Value *args, Value *out) {
  u32 target = AS_U32(args[0]);
  u32 pname = AS_U32(args[1]);
  float param = (float)AS_NUMBER(args[2]);
  glTexParameterf(target, pname, param);
  return UTRUE;
}
static TypePattern argsTexParameterf[] = {
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
};
static CFunction funcTexParameterf = {
  implTexParameterf, "texParameterf",
  sizeof(argsTexParameterf)/sizeof(TypePattern), 0, argsTexParameterf,
};
static ubool implTexParameterfv(i16 argCount, Value *args, Value *out) {
  u32 target = AS_U32(args[0]);
  u32 pname = AS_U32(args[1]);
  GLfloat params = (GLfloat)AS_NUMBER(args[2]);
  glTexParameterfv(target, pname, &params);
  return UTRUE;
}
static TypePattern argsTexParameterfv[] = {
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
};
static CFunction funcTexParameterfv = {
  implTexParameterfv, "texParameterfv",
  sizeof(argsTexParameterfv)/sizeof(TypePattern), 0, argsTexParameterfv,
};
static ubool implTexParameteri(i16 argCount, Value *args, Value *out) {
  u32 target = AS_U32(args[0]);
  u32 pname = AS_U32(args[1]);
  i32 param = AS_I32(args[2]);
  glTexParameteri(target, pname, param);
  return UTRUE;
}
static TypePattern argsTexParameteri[] = {
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
};
static CFunction funcTexParameteri = {
  implTexParameteri, "texParameteri",
  sizeof(argsTexParameteri)/sizeof(TypePattern), 0, argsTexParameteri,
};
static ubool implTexParameteriv(i16 argCount, Value *args, Value *out) {
  u32 target = AS_U32(args[0]);
  u32 pname = AS_U32(args[1]);
  GLint params = (GLint)AS_NUMBER(args[2]);
  glTexParameteriv(target, pname, &params);
  return UTRUE;
}
static TypePattern argsTexParameteriv[] = {
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
};
static CFunction funcTexParameteriv = {
  implTexParameteriv, "texParameteriv",
  sizeof(argsTexParameteriv)/sizeof(TypePattern), 0, argsTexParameteriv,
};
static ubool implUniform1f(i16 argCount, Value *args, Value *out) {
  i32 location = AS_I32(args[0]);
  float v0 = (float)AS_NUMBER(args[1]);
  glUniform1f(location, v0);
  return UTRUE;
}
static TypePattern argsUniform1f[] = {
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
};
static CFunction funcUniform1f = {
  implUniform1f, "uniform1f",
  sizeof(argsUniform1f)/sizeof(TypePattern), 0, argsUniform1f,
};
static ubool implUniform1fv(i16 argCount, Value *args, Value *out) {
  i32 location = AS_I32(args[0]);
  i32 count = AS_I32(args[1]);
  const GLfloat *value = (const GLfloat*)AS_BYTE_ARRAY(args[2])->buffer;
  glUniform1fv(location, count, value);
  return UTRUE;
}
static TypePattern argsUniform1fv[] = {
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_BYTE_ARRAY_OR_VIEW },
};
static CFunction funcUniform1fv = {
  implUniform1fv, "uniform1fv",
  sizeof(argsUniform1fv)/sizeof(TypePattern), 0, argsUniform1fv,
};
static ubool implUniform1i(i16 argCount, Value *args, Value *out) {
  i32 location = AS_I32(args[0]);
  i32 v0 = AS_I32(args[1]);
  glUniform1i(location, v0);
  return UTRUE;
}
static TypePattern argsUniform1i[] = {
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
};
static CFunction funcUniform1i = {
  implUniform1i, "uniform1i",
  sizeof(argsUniform1i)/sizeof(TypePattern), 0, argsUniform1i,
};
static ubool implUniform2f(i16 argCount, Value *args, Value *out) {
  i32 location = AS_I32(args[0]);
  float v0 = (float)AS_NUMBER(args[1]);
  float v1 = (float)AS_NUMBER(args[2]);
  glUniform2f(location, v0, v1);
  return UTRUE;
}
static TypePattern argsUniform2f[] = {
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
};
static CFunction funcUniform2f = {
  implUniform2f, "uniform2f",
  sizeof(argsUniform2f)/sizeof(TypePattern), 0, argsUniform2f,
};
static ubool implUniform2fv(i16 argCount, Value *args, Value *out) {
  i32 location = AS_I32(args[0]);
  i32 count = AS_I32(args[1]);
  const GLfloat *value = (const GLfloat*)AS_BYTE_ARRAY(args[2])->buffer;
  glUniform2fv(location, count, value);
  return UTRUE;
}
static TypePattern argsUniform2fv[] = {
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_BYTE_ARRAY_OR_VIEW },
};
static CFunction funcUniform2fv = {
  implUniform2fv, "uniform2fv",
  sizeof(argsUniform2fv)/sizeof(TypePattern), 0, argsUniform2fv,
};
static ubool implUniform2i(i16 argCount, Value *args, Value *out) {
  i32 location = AS_I32(args[0]);
  i32 v0 = AS_I32(args[1]);
  i32 v1 = AS_I32(args[2]);
  glUniform2i(location, v0, v1);
  return UTRUE;
}
static TypePattern argsUniform2i[] = {
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
};
static CFunction funcUniform2i = {
  implUniform2i, "uniform2i",
  sizeof(argsUniform2i)/sizeof(TypePattern), 0, argsUniform2i,
};
static ubool implUniform3f(i16 argCount, Value *args, Value *out) {
  i32 location = AS_I32(args[0]);
  float v0 = (float)AS_NUMBER(args[1]);
  float v1 = (float)AS_NUMBER(args[2]);
  float v2 = (float)AS_NUMBER(args[3]);
  glUniform3f(location, v0, v1, v2);
  return UTRUE;
}
static TypePattern argsUniform3f[] = {
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
};
static CFunction funcUniform3f = {
  implUniform3f, "uniform3f",
  sizeof(argsUniform3f)/sizeof(TypePattern), 0, argsUniform3f,
};
static ubool implUniform3fv(i16 argCount, Value *args, Value *out) {
  i32 location = AS_I32(args[0]);
  i32 count = AS_I32(args[1]);
  const GLfloat *value = (const GLfloat*)AS_BYTE_ARRAY(args[2])->buffer;
  glUniform3fv(location, count, value);
  return UTRUE;
}
static TypePattern argsUniform3fv[] = {
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_BYTE_ARRAY_OR_VIEW },
};
static CFunction funcUniform3fv = {
  implUniform3fv, "uniform3fv",
  sizeof(argsUniform3fv)/sizeof(TypePattern), 0, argsUniform3fv,
};
static ubool implUniform3i(i16 argCount, Value *args, Value *out) {
  i32 location = AS_I32(args[0]);
  i32 v0 = AS_I32(args[1]);
  i32 v1 = AS_I32(args[2]);
  i32 v2 = AS_I32(args[3]);
  glUniform3i(location, v0, v1, v2);
  return UTRUE;
}
static TypePattern argsUniform3i[] = {
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
};
static CFunction funcUniform3i = {
  implUniform3i, "uniform3i",
  sizeof(argsUniform3i)/sizeof(TypePattern), 0, argsUniform3i,
};
static ubool implUniform4f(i16 argCount, Value *args, Value *out) {
  i32 location = AS_I32(args[0]);
  float v0 = (float)AS_NUMBER(args[1]);
  float v1 = (float)AS_NUMBER(args[2]);
  float v2 = (float)AS_NUMBER(args[3]);
  float v3 = (float)AS_NUMBER(args[4]);
  glUniform4f(location, v0, v1, v2, v3);
  return UTRUE;
}
static TypePattern argsUniform4f[] = {
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
};
static CFunction funcUniform4f = {
  implUniform4f, "uniform4f",
  sizeof(argsUniform4f)/sizeof(TypePattern), 0, argsUniform4f,
};
static ubool implUniform4fv(i16 argCount, Value *args, Value *out) {
  i32 location = AS_I32(args[0]);
  i32 count = AS_I32(args[1]);
  const GLfloat *value = (const GLfloat*)AS_BYTE_ARRAY(args[2])->buffer;
  glUniform4fv(location, count, value);
  return UTRUE;
}
static TypePattern argsUniform4fv[] = {
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_BYTE_ARRAY_OR_VIEW },
};
static CFunction funcUniform4fv = {
  implUniform4fv, "uniform4fv",
  sizeof(argsUniform4fv)/sizeof(TypePattern), 0, argsUniform4fv,
};
static ubool implUniform4i(i16 argCount, Value *args, Value *out) {
  i32 location = AS_I32(args[0]);
  i32 v0 = AS_I32(args[1]);
  i32 v1 = AS_I32(args[2]);
  i32 v2 = AS_I32(args[3]);
  i32 v3 = AS_I32(args[4]);
  glUniform4i(location, v0, v1, v2, v3);
  return UTRUE;
}
static TypePattern argsUniform4i[] = {
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
};
static CFunction funcUniform4i = {
  implUniform4i, "uniform4i",
  sizeof(argsUniform4i)/sizeof(TypePattern), 0, argsUniform4i,
};
static ubool implUniformMatrix2fv(i16 argCount, Value *args, Value *out) {
  i32 location = AS_I32(args[0]);
  i32 count = AS_I32(args[1]);
  ubool transpose = AS_BOOL(args[2]);
  const GLfloat *value = (const GLfloat*)AS_BYTE_ARRAY(args[3])->buffer;
  glUniformMatrix2fv(location, count, transpose, value);
  return UTRUE;
}
static TypePattern argsUniformMatrix2fv[] = {
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_BOOL },
  { TYPE_PATTERN_BYTE_ARRAY_OR_VIEW },
};
static CFunction funcUniformMatrix2fv = {
  implUniformMatrix2fv, "uniformMatrix2fv",
  sizeof(argsUniformMatrix2fv)/sizeof(TypePattern), 0, argsUniformMatrix2fv,
};
static ubool implUniformMatrix3fv(i16 argCount, Value *args, Value *out) {
  i32 location = AS_I32(args[0]);
  i32 count = AS_I32(args[1]);
  ubool transpose = AS_BOOL(args[2]);
  const GLfloat *value = (const GLfloat*)AS_BYTE_ARRAY(args[3])->buffer;
  glUniformMatrix3fv(location, count, transpose, value);
  return UTRUE;
}
static TypePattern argsUniformMatrix3fv[] = {
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_BOOL },
  { TYPE_PATTERN_BYTE_ARRAY_OR_VIEW },
};
static CFunction funcUniformMatrix3fv = {
  implUniformMatrix3fv, "uniformMatrix3fv",
  sizeof(argsUniformMatrix3fv)/sizeof(TypePattern), 0, argsUniformMatrix3fv,
};
static ubool implUniformMatrix4fv(i16 argCount, Value *args, Value *out) {
  i32 location = AS_I32(args[0]);
  i32 count = AS_I32(args[1]);
  ubool transpose = AS_BOOL(args[2]);
  const GLfloat *value = (const GLfloat*)AS_BYTE_ARRAY(args[3])->buffer;
  glUniformMatrix4fv(location, count, transpose, value);
  return UTRUE;
}
static TypePattern argsUniformMatrix4fv[] = {
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_BOOL },
  { TYPE_PATTERN_BYTE_ARRAY_OR_VIEW },
};
static CFunction funcUniformMatrix4fv = {
  implUniformMatrix4fv, "uniformMatrix4fv",
  sizeof(argsUniformMatrix4fv)/sizeof(TypePattern), 0, argsUniformMatrix4fv,
};
static ubool implUseProgram(i16 argCount, Value *args, Value *out) {
  u32 program = AS_U32(args[0]);
  glUseProgram(program);
  return UTRUE;
}
static TypePattern argsUseProgram[] = {
  { TYPE_PATTERN_NUMBER },
};
static CFunction funcUseProgram = {
  implUseProgram, "useProgram",
  sizeof(argsUseProgram)/sizeof(TypePattern), 0, argsUseProgram,
};
static ubool implValidateProgram(i16 argCount, Value *args, Value *out) {
  u32 program = AS_U32(args[0]);
  glValidateProgram(program);
  return UTRUE;
}
static TypePattern argsValidateProgram[] = {
  { TYPE_PATTERN_NUMBER },
};
static CFunction funcValidateProgram = {
  implValidateProgram, "validateProgram",
  sizeof(argsValidateProgram)/sizeof(TypePattern), 0, argsValidateProgram,
};
static ubool implVertexAttrib1f(i16 argCount, Value *args, Value *out) {
  u32 index = AS_U32(args[0]);
  float x = (float)AS_NUMBER(args[1]);
  glVertexAttrib1f(index, x);
  return UTRUE;
}
static TypePattern argsVertexAttrib1f[] = {
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
};
static CFunction funcVertexAttrib1f = {
  implVertexAttrib1f, "vertexAttrib1f",
  sizeof(argsVertexAttrib1f)/sizeof(TypePattern), 0, argsVertexAttrib1f,
};
static ubool implVertexAttrib1fv(i16 argCount, Value *args, Value *out) {
  u32 index = AS_U32(args[0]);
  const GLfloat *v = (const GLfloat*)AS_BYTE_ARRAY(args[1])->buffer;
  glVertexAttrib1fv(index, v);
  return UTRUE;
}
static TypePattern argsVertexAttrib1fv[] = {
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_BYTE_ARRAY_OR_VIEW },
};
static CFunction funcVertexAttrib1fv = {
  implVertexAttrib1fv, "vertexAttrib1fv",
  sizeof(argsVertexAttrib1fv)/sizeof(TypePattern), 0, argsVertexAttrib1fv,
};
static ubool implVertexAttrib2f(i16 argCount, Value *args, Value *out) {
  u32 index = AS_U32(args[0]);
  float x = (float)AS_NUMBER(args[1]);
  float y = (float)AS_NUMBER(args[2]);
  glVertexAttrib2f(index, x, y);
  return UTRUE;
}
static TypePattern argsVertexAttrib2f[] = {
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
};
static CFunction funcVertexAttrib2f = {
  implVertexAttrib2f, "vertexAttrib2f",
  sizeof(argsVertexAttrib2f)/sizeof(TypePattern), 0, argsVertexAttrib2f,
};
static ubool implVertexAttrib2fv(i16 argCount, Value *args, Value *out) {
  u32 index = AS_U32(args[0]);
  const GLfloat *v = (const GLfloat*)AS_BYTE_ARRAY(args[1])->buffer;
  glVertexAttrib2fv(index, v);
  return UTRUE;
}
static TypePattern argsVertexAttrib2fv[] = {
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_BYTE_ARRAY_OR_VIEW },
};
static CFunction funcVertexAttrib2fv = {
  implVertexAttrib2fv, "vertexAttrib2fv",
  sizeof(argsVertexAttrib2fv)/sizeof(TypePattern), 0, argsVertexAttrib2fv,
};
static ubool implVertexAttrib3f(i16 argCount, Value *args, Value *out) {
  u32 index = AS_U32(args[0]);
  float x = (float)AS_NUMBER(args[1]);
  float y = (float)AS_NUMBER(args[2]);
  float z = (float)AS_NUMBER(args[3]);
  glVertexAttrib3f(index, x, y, z);
  return UTRUE;
}
static TypePattern argsVertexAttrib3f[] = {
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
};
static CFunction funcVertexAttrib3f = {
  implVertexAttrib3f, "vertexAttrib3f",
  sizeof(argsVertexAttrib3f)/sizeof(TypePattern), 0, argsVertexAttrib3f,
};
static ubool implVertexAttrib3fv(i16 argCount, Value *args, Value *out) {
  u32 index = AS_U32(args[0]);
  const GLfloat *v = (const GLfloat*)AS_BYTE_ARRAY(args[1])->buffer;
  glVertexAttrib3fv(index, v);
  return UTRUE;
}
static TypePattern argsVertexAttrib3fv[] = {
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_BYTE_ARRAY_OR_VIEW },
};
static CFunction funcVertexAttrib3fv = {
  implVertexAttrib3fv, "vertexAttrib3fv",
  sizeof(argsVertexAttrib3fv)/sizeof(TypePattern), 0, argsVertexAttrib3fv,
};
static ubool implVertexAttrib4f(i16 argCount, Value *args, Value *out) {
  u32 index = AS_U32(args[0]);
  float x = (float)AS_NUMBER(args[1]);
  float y = (float)AS_NUMBER(args[2]);
  float z = (float)AS_NUMBER(args[3]);
  float w = (float)AS_NUMBER(args[4]);
  glVertexAttrib4f(index, x, y, z, w);
  return UTRUE;
}
static TypePattern argsVertexAttrib4f[] = {
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
};
static CFunction funcVertexAttrib4f = {
  implVertexAttrib4f, "vertexAttrib4f",
  sizeof(argsVertexAttrib4f)/sizeof(TypePattern), 0, argsVertexAttrib4f,
};
static ubool implVertexAttrib4fv(i16 argCount, Value *args, Value *out) {
  u32 index = AS_U32(args[0]);
  const GLfloat *v = (const GLfloat*)AS_BYTE_ARRAY(args[1])->buffer;
  glVertexAttrib4fv(index, v);
  return UTRUE;
}
static TypePattern argsVertexAttrib4fv[] = {
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_BYTE_ARRAY_OR_VIEW },
};
static CFunction funcVertexAttrib4fv = {
  implVertexAttrib4fv, "vertexAttrib4fv",
  sizeof(argsVertexAttrib4fv)/sizeof(TypePattern), 0, argsVertexAttrib4fv,
};
static ubool implVertexAttribPointer(i16 argCount, Value *args, Value *out) {
  u32 index = AS_U32(args[0]);
  i32 size = AS_I32(args[1]);
  u32 type = AS_U32(args[2]);
  ubool normalized = AS_BOOL(args[3]);
  i32 stride = AS_I32(args[4]);
  const void *pointer = (void*)(size_t)AS_NUMBER(args[5]);
  glVertexAttribPointer(index, size, type, normalized, stride, pointer);
  return UTRUE;
}
static TypePattern argsVertexAttribPointer[] = {
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_BOOL },
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
};
static CFunction funcVertexAttribPointer = {
  implVertexAttribPointer, "vertexAttribPointer",
  sizeof(argsVertexAttribPointer)/sizeof(TypePattern), 0, argsVertexAttribPointer,
};
static ubool implViewport(i16 argCount, Value *args, Value *out) {
  i32 x = AS_I32(args[0]);
  i32 y = AS_I32(args[1]);
  i32 width = AS_I32(args[2]);
  i32 height = AS_I32(args[3]);
  glViewport(x, y, width, height);
  return UTRUE;
}
static TypePattern argsViewport[] = {
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
};
static CFunction funcViewport = {
  implViewport, "viewport",
  sizeof(argsViewport)/sizeof(TypePattern), 0, argsViewport,
};
static ubool implReadBuffer(i16 argCount, Value *args, Value *out) {
  u32 src = AS_U32(args[0]);
  glReadBuffer(src);
  return UTRUE;
}
static TypePattern argsReadBuffer[] = {
  { TYPE_PATTERN_NUMBER },
};
static CFunction funcReadBuffer = {
  implReadBuffer, "readBuffer",
  sizeof(argsReadBuffer)/sizeof(TypePattern), 0, argsReadBuffer,
};
static ubool implCopyTexSubImage3D(i16 argCount, Value *args, Value *out) {
  u32 target = AS_U32(args[0]);
  i32 level = AS_I32(args[1]);
  i32 xoffset = AS_I32(args[2]);
  i32 yoffset = AS_I32(args[3]);
  i32 zoffset = AS_I32(args[4]);
  i32 x = AS_I32(args[5]);
  i32 y = AS_I32(args[6]);
  i32 width = AS_I32(args[7]);
  i32 height = AS_I32(args[8]);
  glCopyTexSubImage3D(target, level, xoffset, yoffset, zoffset, x, y, width, height);
  return UTRUE;
}
static TypePattern argsCopyTexSubImage3D[] = {
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
};
static CFunction funcCopyTexSubImage3D = {
  implCopyTexSubImage3D, "copyTexSubImage3D",
  sizeof(argsCopyTexSubImage3D)/sizeof(TypePattern), 0, argsCopyTexSubImage3D,
};
static ubool implGenQuerie(i16 argCount, Value *args, Value *out) {
  GLuint value;
  glGenQueries(1, &value);
  *out = NUMBER_VAL(value);
  return UTRUE;
}
static CFunction funcGenQuerie = {
  implGenQuerie, "genQuerie",
};
static ubool implDeleteQuerie(i16 argCount, Value *args, Value *out) {
  GLuint value = AS_U32(args[0]);
  glDeleteQueries(1, &value);
  return UTRUE;
}
static TypePattern argsDeleteQuerie[] = {
  { TYPE_PATTERN_NUMBER },
};
static CFunction funcDeleteQuerie = {
  implDeleteQuerie, "deleteQuerie",
  sizeof(argsDeleteQuerie)/sizeof(TypePattern), 0, argsDeleteQuerie,
};
static ubool implIsQuery(i16 argCount, Value *args, Value *out) {
  u32 id = AS_U32(args[0]);
  *out = BOOL_VAL(glIsQuery(id));
  return UTRUE;
}
static TypePattern argsIsQuery[] = {
  { TYPE_PATTERN_NUMBER },
};
static CFunction funcIsQuery = {
  implIsQuery, "isQuery",
  sizeof(argsIsQuery)/sizeof(TypePattern), 0, argsIsQuery,
};
static ubool implBeginQuery(i16 argCount, Value *args, Value *out) {
  u32 target = AS_U32(args[0]);
  u32 id = AS_U32(args[1]);
  glBeginQuery(target, id);
  return UTRUE;
}
static TypePattern argsBeginQuery[] = {
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
};
static CFunction funcBeginQuery = {
  implBeginQuery, "beginQuery",
  sizeof(argsBeginQuery)/sizeof(TypePattern), 0, argsBeginQuery,
};
static ubool implEndQuery(i16 argCount, Value *args, Value *out) {
  u32 target = AS_U32(args[0]);
  glEndQuery(target);
  return UTRUE;
}
static TypePattern argsEndQuery[] = {
  { TYPE_PATTERN_NUMBER },
};
static CFunction funcEndQuery = {
  implEndQuery, "endQuery",
  sizeof(argsEndQuery)/sizeof(TypePattern), 0, argsEndQuery,
};
static ubool implUniformMatrix2x3fv(i16 argCount, Value *args, Value *out) {
  i32 location = AS_I32(args[0]);
  i32 count = AS_I32(args[1]);
  ubool transpose = AS_BOOL(args[2]);
  const GLfloat *value = (const GLfloat*)AS_BYTE_ARRAY(args[3])->buffer;
  glUniformMatrix2x3fv(location, count, transpose, value);
  return UTRUE;
}
static TypePattern argsUniformMatrix2x3fv[] = {
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_BOOL },
  { TYPE_PATTERN_BYTE_ARRAY_OR_VIEW },
};
static CFunction funcUniformMatrix2x3fv = {
  implUniformMatrix2x3fv, "uniformMatrix2x3fv",
  sizeof(argsUniformMatrix2x3fv)/sizeof(TypePattern), 0, argsUniformMatrix2x3fv,
};
static ubool implUniformMatrix3x2fv(i16 argCount, Value *args, Value *out) {
  i32 location = AS_I32(args[0]);
  i32 count = AS_I32(args[1]);
  ubool transpose = AS_BOOL(args[2]);
  const GLfloat *value = (const GLfloat*)AS_BYTE_ARRAY(args[3])->buffer;
  glUniformMatrix3x2fv(location, count, transpose, value);
  return UTRUE;
}
static TypePattern argsUniformMatrix3x2fv[] = {
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_BOOL },
  { TYPE_PATTERN_BYTE_ARRAY_OR_VIEW },
};
static CFunction funcUniformMatrix3x2fv = {
  implUniformMatrix3x2fv, "uniformMatrix3x2fv",
  sizeof(argsUniformMatrix3x2fv)/sizeof(TypePattern), 0, argsUniformMatrix3x2fv,
};
static ubool implUniformMatrix2x4fv(i16 argCount, Value *args, Value *out) {
  i32 location = AS_I32(args[0]);
  i32 count = AS_I32(args[1]);
  ubool transpose = AS_BOOL(args[2]);
  const GLfloat *value = (const GLfloat*)AS_BYTE_ARRAY(args[3])->buffer;
  glUniformMatrix2x4fv(location, count, transpose, value);
  return UTRUE;
}
static TypePattern argsUniformMatrix2x4fv[] = {
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_BOOL },
  { TYPE_PATTERN_BYTE_ARRAY_OR_VIEW },
};
static CFunction funcUniformMatrix2x4fv = {
  implUniformMatrix2x4fv, "uniformMatrix2x4fv",
  sizeof(argsUniformMatrix2x4fv)/sizeof(TypePattern), 0, argsUniformMatrix2x4fv,
};
static ubool implUniformMatrix4x2fv(i16 argCount, Value *args, Value *out) {
  i32 location = AS_I32(args[0]);
  i32 count = AS_I32(args[1]);
  ubool transpose = AS_BOOL(args[2]);
  const GLfloat *value = (const GLfloat*)AS_BYTE_ARRAY(args[3])->buffer;
  glUniformMatrix4x2fv(location, count, transpose, value);
  return UTRUE;
}
static TypePattern argsUniformMatrix4x2fv[] = {
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_BOOL },
  { TYPE_PATTERN_BYTE_ARRAY_OR_VIEW },
};
static CFunction funcUniformMatrix4x2fv = {
  implUniformMatrix4x2fv, "uniformMatrix4x2fv",
  sizeof(argsUniformMatrix4x2fv)/sizeof(TypePattern), 0, argsUniformMatrix4x2fv,
};
static ubool implUniformMatrix3x4fv(i16 argCount, Value *args, Value *out) {
  i32 location = AS_I32(args[0]);
  i32 count = AS_I32(args[1]);
  ubool transpose = AS_BOOL(args[2]);
  const GLfloat *value = (const GLfloat*)AS_BYTE_ARRAY(args[3])->buffer;
  glUniformMatrix3x4fv(location, count, transpose, value);
  return UTRUE;
}
static TypePattern argsUniformMatrix3x4fv[] = {
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_BOOL },
  { TYPE_PATTERN_BYTE_ARRAY_OR_VIEW },
};
static CFunction funcUniformMatrix3x4fv = {
  implUniformMatrix3x4fv, "uniformMatrix3x4fv",
  sizeof(argsUniformMatrix3x4fv)/sizeof(TypePattern), 0, argsUniformMatrix3x4fv,
};
static ubool implUniformMatrix4x3fv(i16 argCount, Value *args, Value *out) {
  i32 location = AS_I32(args[0]);
  i32 count = AS_I32(args[1]);
  ubool transpose = AS_BOOL(args[2]);
  const GLfloat *value = (const GLfloat*)AS_BYTE_ARRAY(args[3])->buffer;
  glUniformMatrix4x3fv(location, count, transpose, value);
  return UTRUE;
}
static TypePattern argsUniformMatrix4x3fv[] = {
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_BOOL },
  { TYPE_PATTERN_BYTE_ARRAY_OR_VIEW },
};
static CFunction funcUniformMatrix4x3fv = {
  implUniformMatrix4x3fv, "uniformMatrix4x3fv",
  sizeof(argsUniformMatrix4x3fv)/sizeof(TypePattern), 0, argsUniformMatrix4x3fv,
};
static ubool implBlitFramebuffer(i16 argCount, Value *args, Value *out) {
  i32 srcX0 = AS_I32(args[0]);
  i32 srcY0 = AS_I32(args[1]);
  i32 srcX1 = AS_I32(args[2]);
  i32 srcY1 = AS_I32(args[3]);
  i32 dstX0 = AS_I32(args[4]);
  i32 dstY0 = AS_I32(args[5]);
  i32 dstX1 = AS_I32(args[6]);
  i32 dstY1 = AS_I32(args[7]);
  u32 mask = AS_U32(args[8]);
  u32 filter = AS_U32(args[9]);
  glBlitFramebuffer(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
  return UTRUE;
}
static TypePattern argsBlitFramebuffer[] = {
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
};
static CFunction funcBlitFramebuffer = {
  implBlitFramebuffer, "blitFramebuffer",
  sizeof(argsBlitFramebuffer)/sizeof(TypePattern), 0, argsBlitFramebuffer,
};
static ubool implRenderbufferStorageMultisample(i16 argCount, Value *args, Value *out) {
  u32 target = AS_U32(args[0]);
  i32 samples = AS_I32(args[1]);
  u32 internalformat = AS_U32(args[2]);
  i32 width = AS_I32(args[3]);
  i32 height = AS_I32(args[4]);
  glRenderbufferStorageMultisample(target, samples, internalformat, width, height);
  return UTRUE;
}
static TypePattern argsRenderbufferStorageMultisample[] = {
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
};
static CFunction funcRenderbufferStorageMultisample = {
  implRenderbufferStorageMultisample, "renderbufferStorageMultisample",
  sizeof(argsRenderbufferStorageMultisample)/sizeof(TypePattern), 0, argsRenderbufferStorageMultisample,
};
static ubool implFramebufferTextureLayer(i16 argCount, Value *args, Value *out) {
  u32 target = AS_U32(args[0]);
  u32 attachment = AS_U32(args[1]);
  u32 texture = AS_U32(args[2]);
  i32 level = AS_I32(args[3]);
  i32 layer = AS_I32(args[4]);
  glFramebufferTextureLayer(target, attachment, texture, level, layer);
  return UTRUE;
}
static TypePattern argsFramebufferTextureLayer[] = {
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
};
static CFunction funcFramebufferTextureLayer = {
  implFramebufferTextureLayer, "framebufferTextureLayer",
  sizeof(argsFramebufferTextureLayer)/sizeof(TypePattern), 0, argsFramebufferTextureLayer,
};
static ubool implBindVertexArray(i16 argCount, Value *args, Value *out) {
  u32 array = AS_U32(args[0]);
  glBindVertexArray(array);
  return UTRUE;
}
static TypePattern argsBindVertexArray[] = {
  { TYPE_PATTERN_NUMBER },
};
static CFunction funcBindVertexArray = {
  implBindVertexArray, "bindVertexArray",
  sizeof(argsBindVertexArray)/sizeof(TypePattern), 0, argsBindVertexArray,
};
static ubool implDeleteVertexArray(i16 argCount, Value *args, Value *out) {
  GLuint value = AS_U32(args[0]);
  glDeleteVertexArrays(1, &value);
  return UTRUE;
}
static TypePattern argsDeleteVertexArray[] = {
  { TYPE_PATTERN_NUMBER },
};
static CFunction funcDeleteVertexArray = {
  implDeleteVertexArray, "deleteVertexArray",
  sizeof(argsDeleteVertexArray)/sizeof(TypePattern), 0, argsDeleteVertexArray,
};
static ubool implGenVertexArray(i16 argCount, Value *args, Value *out) {
  GLuint value;
  glGenVertexArrays(1, &value);
  *out = NUMBER_VAL(value);
  return UTRUE;
}
static CFunction funcGenVertexArray = {
  implGenVertexArray, "genVertexArray",
};
static ubool implIsVertexArray(i16 argCount, Value *args, Value *out) {
  u32 array = AS_U32(args[0]);
  *out = BOOL_VAL(glIsVertexArray(array));
  return UTRUE;
}
static TypePattern argsIsVertexArray[] = {
  { TYPE_PATTERN_NUMBER },
};
static CFunction funcIsVertexArray = {
  implIsVertexArray, "isVertexArray",
  sizeof(argsIsVertexArray)/sizeof(TypePattern), 0, argsIsVertexArray,
};
static ubool implBeginTransformFeedback(i16 argCount, Value *args, Value *out) {
  u32 primitiveMode = AS_U32(args[0]);
  glBeginTransformFeedback(primitiveMode);
  return UTRUE;
}
static TypePattern argsBeginTransformFeedback[] = {
  { TYPE_PATTERN_NUMBER },
};
static CFunction funcBeginTransformFeedback = {
  implBeginTransformFeedback, "beginTransformFeedback",
  sizeof(argsBeginTransformFeedback)/sizeof(TypePattern), 0, argsBeginTransformFeedback,
};
static ubool implEndTransformFeedback(i16 argCount, Value *args, Value *out) {
  glEndTransformFeedback();
  return UTRUE;
}
static CFunction funcEndTransformFeedback = {
  implEndTransformFeedback, "endTransformFeedback",
};
static ubool implBindBufferRange(i16 argCount, Value *args, Value *out) {
  u32 target = AS_U32(args[0]);
  u32 index = AS_U32(args[1]);
  u32 buffer = AS_U32(args[2]);
  long offset = (long)AS_NUMBER(args[3]);
  size_t size = (size_t)AS_NUMBER(args[4]);
  glBindBufferRange(target, index, buffer, offset, size);
  return UTRUE;
}
static TypePattern argsBindBufferRange[] = {
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
};
static CFunction funcBindBufferRange = {
  implBindBufferRange, "bindBufferRange",
  sizeof(argsBindBufferRange)/sizeof(TypePattern), 0, argsBindBufferRange,
};
static ubool implBindBufferBase(i16 argCount, Value *args, Value *out) {
  u32 target = AS_U32(args[0]);
  u32 index = AS_U32(args[1]);
  u32 buffer = AS_U32(args[2]);
  glBindBufferBase(target, index, buffer);
  return UTRUE;
}
static TypePattern argsBindBufferBase[] = {
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
};
static CFunction funcBindBufferBase = {
  implBindBufferBase, "bindBufferBase",
  sizeof(argsBindBufferBase)/sizeof(TypePattern), 0, argsBindBufferBase,
};
static ubool implVertexAttribI4i(i16 argCount, Value *args, Value *out) {
  u32 index = AS_U32(args[0]);
  i32 x = AS_I32(args[1]);
  i32 y = AS_I32(args[2]);
  i32 z = AS_I32(args[3]);
  i32 w = AS_I32(args[4]);
  glVertexAttribI4i(index, x, y, z, w);
  return UTRUE;
}
static TypePattern argsVertexAttribI4i[] = {
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
};
static CFunction funcVertexAttribI4i = {
  implVertexAttribI4i, "vertexAttribI4i",
  sizeof(argsVertexAttribI4i)/sizeof(TypePattern), 0, argsVertexAttribI4i,
};
static ubool implVertexAttribI4ui(i16 argCount, Value *args, Value *out) {
  u32 index = AS_U32(args[0]);
  u32 x = AS_U32(args[1]);
  u32 y = AS_U32(args[2]);
  u32 z = AS_U32(args[3]);
  u32 w = AS_U32(args[4]);
  glVertexAttribI4ui(index, x, y, z, w);
  return UTRUE;
}
static TypePattern argsVertexAttribI4ui[] = {
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
};
static CFunction funcVertexAttribI4ui = {
  implVertexAttribI4ui, "vertexAttribI4ui",
  sizeof(argsVertexAttribI4ui)/sizeof(TypePattern), 0, argsVertexAttribI4ui,
};
static ubool implGetFragDataLocation(i16 argCount, Value *args, Value *out) {
  u32 program = AS_U32(args[0]);
  const char *name = AS_STRING(args[1])->chars;
  *out = NUMBER_VAL(glGetFragDataLocation(program, name));
  return UTRUE;
}
static TypePattern argsGetFragDataLocation[] = {
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_STRING },
};
static CFunction funcGetFragDataLocation = {
  implGetFragDataLocation, "getFragDataLocation",
  sizeof(argsGetFragDataLocation)/sizeof(TypePattern), 0, argsGetFragDataLocation,
};
static ubool implUniform1ui(i16 argCount, Value *args, Value *out) {
  i32 location = AS_I32(args[0]);
  u32 v0 = AS_U32(args[1]);
  glUniform1ui(location, v0);
  return UTRUE;
}
static TypePattern argsUniform1ui[] = {
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
};
static CFunction funcUniform1ui = {
  implUniform1ui, "uniform1ui",
  sizeof(argsUniform1ui)/sizeof(TypePattern), 0, argsUniform1ui,
};
static ubool implUniform2ui(i16 argCount, Value *args, Value *out) {
  i32 location = AS_I32(args[0]);
  u32 v0 = AS_U32(args[1]);
  u32 v1 = AS_U32(args[2]);
  glUniform2ui(location, v0, v1);
  return UTRUE;
}
static TypePattern argsUniform2ui[] = {
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
};
static CFunction funcUniform2ui = {
  implUniform2ui, "uniform2ui",
  sizeof(argsUniform2ui)/sizeof(TypePattern), 0, argsUniform2ui,
};
static ubool implUniform3ui(i16 argCount, Value *args, Value *out) {
  i32 location = AS_I32(args[0]);
  u32 v0 = AS_U32(args[1]);
  u32 v1 = AS_U32(args[2]);
  u32 v2 = AS_U32(args[3]);
  glUniform3ui(location, v0, v1, v2);
  return UTRUE;
}
static TypePattern argsUniform3ui[] = {
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
};
static CFunction funcUniform3ui = {
  implUniform3ui, "uniform3ui",
  sizeof(argsUniform3ui)/sizeof(TypePattern), 0, argsUniform3ui,
};
static ubool implUniform4ui(i16 argCount, Value *args, Value *out) {
  i32 location = AS_I32(args[0]);
  u32 v0 = AS_U32(args[1]);
  u32 v1 = AS_U32(args[2]);
  u32 v2 = AS_U32(args[3]);
  u32 v3 = AS_U32(args[4]);
  glUniform4ui(location, v0, v1, v2, v3);
  return UTRUE;
}
static TypePattern argsUniform4ui[] = {
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
};
static CFunction funcUniform4ui = {
  implUniform4ui, "uniform4ui",
  sizeof(argsUniform4ui)/sizeof(TypePattern), 0, argsUniform4ui,
};
static ubool implClearBufferfv(i16 argCount, Value *args, Value *out) {
  u32 buffer = AS_U32(args[0]);
  i32 drawbuffer = AS_I32(args[1]);
  const GLfloat *value = (const GLfloat*)AS_BYTE_ARRAY(args[2])->buffer;
  glClearBufferfv(buffer, drawbuffer, value);
  return UTRUE;
}
static TypePattern argsClearBufferfv[] = {
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_BYTE_ARRAY_OR_VIEW },
};
static CFunction funcClearBufferfv = {
  implClearBufferfv, "clearBufferfv",
  sizeof(argsClearBufferfv)/sizeof(TypePattern), 0, argsClearBufferfv,
};
static ubool implClearBufferfi(i16 argCount, Value *args, Value *out) {
  u32 buffer = AS_U32(args[0]);
  i32 drawbuffer = AS_I32(args[1]);
  float depth = (float)AS_NUMBER(args[2]);
  i32 stencil = AS_I32(args[3]);
  glClearBufferfi(buffer, drawbuffer, depth, stencil);
  return UTRUE;
}
static TypePattern argsClearBufferfi[] = {
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
};
static CFunction funcClearBufferfi = {
  implClearBufferfi, "clearBufferfi",
  sizeof(argsClearBufferfi)/sizeof(TypePattern), 0, argsClearBufferfi,
};
static ubool implCopyBufferSubData(i16 argCount, Value *args, Value *out) {
  u32 readTarget = AS_U32(args[0]);
  u32 writeTarget = AS_U32(args[1]);
  long readOffset = (long)AS_NUMBER(args[2]);
  long writeOffset = (long)AS_NUMBER(args[3]);
  size_t size = (size_t)AS_NUMBER(args[4]);
  glCopyBufferSubData(readTarget, writeTarget, readOffset, writeOffset, size);
  return UTRUE;
}
static TypePattern argsCopyBufferSubData[] = {
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
};
static CFunction funcCopyBufferSubData = {
  implCopyBufferSubData, "copyBufferSubData",
  sizeof(argsCopyBufferSubData)/sizeof(TypePattern), 0, argsCopyBufferSubData,
};
static ubool implGetUniformBlockIndex(i16 argCount, Value *args, Value *out) {
  u32 program = AS_U32(args[0]);
  const char *uniformBlockName = AS_STRING(args[1])->chars;
  *out = NUMBER_VAL(glGetUniformBlockIndex(program, uniformBlockName));
  return UTRUE;
}
static TypePattern argsGetUniformBlockIndex[] = {
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_STRING },
};
static CFunction funcGetUniformBlockIndex = {
  implGetUniformBlockIndex, "getUniformBlockIndex",
  sizeof(argsGetUniformBlockIndex)/sizeof(TypePattern), 0, argsGetUniformBlockIndex,
};
static ubool implUniformBlockBinding(i16 argCount, Value *args, Value *out) {
  u32 program = AS_U32(args[0]);
  u32 uniformBlockIndex = AS_U32(args[1]);
  u32 uniformBlockBinding = AS_U32(args[2]);
  glUniformBlockBinding(program, uniformBlockIndex, uniformBlockBinding);
  return UTRUE;
}
static TypePattern argsUniformBlockBinding[] = {
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
};
static CFunction funcUniformBlockBinding = {
  implUniformBlockBinding, "uniformBlockBinding",
  sizeof(argsUniformBlockBinding)/sizeof(TypePattern), 0, argsUniformBlockBinding,
};
static ubool implDrawArraysInstanced(i16 argCount, Value *args, Value *out) {
  u32 mode = AS_U32(args[0]);
  i32 first = AS_I32(args[1]);
  i32 count = AS_I32(args[2]);
  i32 instancecount = AS_I32(args[3]);
  glDrawArraysInstanced(mode, first, count, instancecount);
  return UTRUE;
}
static TypePattern argsDrawArraysInstanced[] = {
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
};
static CFunction funcDrawArraysInstanced = {
  implDrawArraysInstanced, "drawArraysInstanced",
  sizeof(argsDrawArraysInstanced)/sizeof(TypePattern), 0, argsDrawArraysInstanced,
};
static ubool implIsSampler(i16 argCount, Value *args, Value *out) {
  u32 sampler = AS_U32(args[0]);
  *out = BOOL_VAL(glIsSampler(sampler));
  return UTRUE;
}
static TypePattern argsIsSampler[] = {
  { TYPE_PATTERN_NUMBER },
};
static CFunction funcIsSampler = {
  implIsSampler, "isSampler",
  sizeof(argsIsSampler)/sizeof(TypePattern), 0, argsIsSampler,
};
static ubool implBindSampler(i16 argCount, Value *args, Value *out) {
  u32 unit = AS_U32(args[0]);
  u32 sampler = AS_U32(args[1]);
  glBindSampler(unit, sampler);
  return UTRUE;
}
static TypePattern argsBindSampler[] = {
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
};
static CFunction funcBindSampler = {
  implBindSampler, "bindSampler",
  sizeof(argsBindSampler)/sizeof(TypePattern), 0, argsBindSampler,
};
static ubool implSamplerParameteri(i16 argCount, Value *args, Value *out) {
  u32 sampler = AS_U32(args[0]);
  u32 pname = AS_U32(args[1]);
  i32 param = AS_I32(args[2]);
  glSamplerParameteri(sampler, pname, param);
  return UTRUE;
}
static TypePattern argsSamplerParameteri[] = {
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
};
static CFunction funcSamplerParameteri = {
  implSamplerParameteri, "samplerParameteri",
  sizeof(argsSamplerParameteri)/sizeof(TypePattern), 0, argsSamplerParameteri,
};
static ubool implSamplerParameterf(i16 argCount, Value *args, Value *out) {
  u32 sampler = AS_U32(args[0]);
  u32 pname = AS_U32(args[1]);
  float param = (float)AS_NUMBER(args[2]);
  glSamplerParameterf(sampler, pname, param);
  return UTRUE;
}
static TypePattern argsSamplerParameterf[] = {
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
};
static CFunction funcSamplerParameterf = {
  implSamplerParameterf, "samplerParameterf",
  sizeof(argsSamplerParameterf)/sizeof(TypePattern), 0, argsSamplerParameterf,
};
static ubool implSamplerParameterfv(i16 argCount, Value *args, Value *out) {
  u32 sampler = AS_U32(args[0]);
  u32 pname = AS_U32(args[1]);
  const GLfloat *param = (const GLfloat*)AS_BYTE_ARRAY(args[2])->buffer;
  glSamplerParameterfv(sampler, pname, param);
  return UTRUE;
}
static TypePattern argsSamplerParameterfv[] = {
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_BYTE_ARRAY_OR_VIEW },
};
static CFunction funcSamplerParameterfv = {
  implSamplerParameterfv, "samplerParameterfv",
  sizeof(argsSamplerParameterfv)/sizeof(TypePattern), 0, argsSamplerParameterfv,
};
static ubool implVertexAttribDivisor(i16 argCount, Value *args, Value *out) {
  u32 index = AS_U32(args[0]);
  u32 divisor = AS_U32(args[1]);
  glVertexAttribDivisor(index, divisor);
  return UTRUE;
}
static TypePattern argsVertexAttribDivisor[] = {
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
};
static CFunction funcVertexAttribDivisor = {
  implVertexAttribDivisor, "vertexAttribDivisor",
  sizeof(argsVertexAttribDivisor)/sizeof(TypePattern), 0, argsVertexAttribDivisor,
};
static ubool implBindTransformFeedback(i16 argCount, Value *args, Value *out) {
  u32 target = AS_U32(args[0]);
  u32 id = AS_U32(args[1]);
  glBindTransformFeedback(target, id);
  return UTRUE;
}
static TypePattern argsBindTransformFeedback[] = {
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
};
static CFunction funcBindTransformFeedback = {
  implBindTransformFeedback, "bindTransformFeedback",
  sizeof(argsBindTransformFeedback)/sizeof(TypePattern), 0, argsBindTransformFeedback,
};
static ubool implIsTransformFeedback(i16 argCount, Value *args, Value *out) {
  u32 id = AS_U32(args[0]);
  *out = BOOL_VAL(glIsTransformFeedback(id));
  return UTRUE;
}
static TypePattern argsIsTransformFeedback[] = {
  { TYPE_PATTERN_NUMBER },
};
static CFunction funcIsTransformFeedback = {
  implIsTransformFeedback, "isTransformFeedback",
  sizeof(argsIsTransformFeedback)/sizeof(TypePattern), 0, argsIsTransformFeedback,
};
static ubool implPauseTransformFeedback(i16 argCount, Value *args, Value *out) {
  glPauseTransformFeedback();
  return UTRUE;
}
static CFunction funcPauseTransformFeedback = {
  implPauseTransformFeedback, "pauseTransformFeedback",
};
static ubool implResumeTransformFeedback(i16 argCount, Value *args, Value *out) {
  glResumeTransformFeedback();
  return UTRUE;
}
static CFunction funcResumeTransformFeedback = {
  implResumeTransformFeedback, "resumeTransformFeedback",
};
static ubool implProgramParameteri(i16 argCount, Value *args, Value *out) {
  u32 program = AS_U32(args[0]);
  u32 pname = AS_U32(args[1]);
  i32 value = AS_I32(args[2]);
  glProgramParameteri(program, pname, value);
  return UTRUE;
}
static TypePattern argsProgramParameteri[] = {
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
};
static CFunction funcProgramParameteri = {
  implProgramParameteri, "programParameteri",
  sizeof(argsProgramParameteri)/sizeof(TypePattern), 0, argsProgramParameteri,
};
static ubool implTexStorage2D(i16 argCount, Value *args, Value *out) {
  u32 target = AS_U32(args[0]);
  i32 levels = AS_I32(args[1]);
  u32 internalformat = AS_U32(args[2]);
  i32 width = AS_I32(args[3]);
  i32 height = AS_I32(args[4]);
  glTexStorage2D(target, levels, internalformat, width, height);
  return UTRUE;
}
static TypePattern argsTexStorage2D[] = {
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
};
static CFunction funcTexStorage2D = {
  implTexStorage2D, "texStorage2D",
  sizeof(argsTexStorage2D)/sizeof(TypePattern), 0, argsTexStorage2D,
};
static ubool implTexStorage3D(i16 argCount, Value *args, Value *out) {
  u32 target = AS_U32(args[0]);
  i32 levels = AS_I32(args[1]);
  u32 internalformat = AS_U32(args[2]);
  i32 width = AS_I32(args[3]);
  i32 height = AS_I32(args[4]);
  i32 depth = AS_I32(args[5]);
  glTexStorage3D(target, levels, internalformat, width, height, depth);
  return UTRUE;
}
static TypePattern argsTexStorage3D[] = {
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
  { TYPE_PATTERN_NUMBER },
};
static CFunction funcTexStorage3D = {
  implTexStorage3D, "texStorage3D",
  sizeof(argsTexStorage3D)/sizeof(TypePattern), 0, argsTexStorage3D,
};
static CFunction *genFunctions[] = {
  &funcActiveTexture,
  &funcAttachShader,
  &funcBindAttribLocation,
  &funcBindBuffer,
  &funcBindFramebuffer,
  &funcBindRenderbuffer,
  &funcBindTexture,
  &funcBlendColor,
  &funcBlendEquation,
  &funcBlendEquationSeparate,
  &funcBlendFunc,
  &funcBlendFuncSeparate,
  &funcCheckFramebufferStatus,
  &funcClear,
  &funcClearColor,
  &funcClearDepthf,
  &funcClearStencil,
  &funcColorMask,
  &funcCompileShader,
  &funcCopyTexImage2D,
  &funcCopyTexSubImage2D,
  &funcCreateProgram,
  &funcCreateShader,
  &funcCullFace,
  &funcDeleteBuffer,
  &funcDeleteFramebuffer,
  &funcDeleteProgram,
  &funcDeleteRenderbuffer,
  &funcDeleteShader,
  &funcDeleteTexture,
  &funcDepthFunc,
  &funcDepthMask,
  &funcDepthRangef,
  &funcDetachShader,
  &funcDisable,
  &funcDisableVertexAttribArray,
  &funcDrawArrays,
  &funcDrawElements,
  &funcEnable,
  &funcEnableVertexAttribArray,
  &funcFinish,
  &funcFlush,
  &funcFramebufferRenderbuffer,
  &funcFramebufferTexture2D,
  &funcFrontFace,
  &funcGenBuffer,
  &funcGenerateMipmap,
  &funcGenFramebuffer,
  &funcGenRenderbuffer,
  &funcGenTexture,
  &funcGetAttribLocation,
  &funcGetBufferParameteriv,
  &funcGetError,
  &funcGetFramebufferAttachmentParameteriv,
  &funcGetProgramiv,
  &funcGetRenderbufferParameteriv,
  &funcGetShaderiv,
  &funcGetTexParameterfv,
  &funcGetTexParameteriv,
  &funcGetUniformfv,
  &funcGetUniformiv,
  &funcGetUniformLocation,
  &funcGetVertexAttribfv,
  &funcGetVertexAttribiv,
  &funcHint,
  &funcIsBuffer,
  &funcIsEnabled,
  &funcIsFramebuffer,
  &funcIsProgram,
  &funcIsRenderbuffer,
  &funcIsShader,
  &funcIsTexture,
  &funcLineWidth,
  &funcLinkProgram,
  &funcPixelStorei,
  &funcPolygonOffset,
  &funcReleaseShaderCompiler,
  &funcRenderbufferStorage,
  &funcSampleCoverage,
  &funcScissor,
  &funcStencilFunc,
  &funcStencilFuncSeparate,
  &funcStencilMask,
  &funcStencilMaskSeparate,
  &funcStencilOp,
  &funcStencilOpSeparate,
  &funcTexParameterf,
  &funcTexParameterfv,
  &funcTexParameteri,
  &funcTexParameteriv,
  &funcUniform1f,
  &funcUniform1fv,
  &funcUniform1i,
  &funcUniform2f,
  &funcUniform2fv,
  &funcUniform2i,
  &funcUniform3f,
  &funcUniform3fv,
  &funcUniform3i,
  &funcUniform4f,
  &funcUniform4fv,
  &funcUniform4i,
  &funcUniformMatrix2fv,
  &funcUniformMatrix3fv,
  &funcUniformMatrix4fv,
  &funcUseProgram,
  &funcValidateProgram,
  &funcVertexAttrib1f,
  &funcVertexAttrib1fv,
  &funcVertexAttrib2f,
  &funcVertexAttrib2fv,
  &funcVertexAttrib3f,
  &funcVertexAttrib3fv,
  &funcVertexAttrib4f,
  &funcVertexAttrib4fv,
  &funcVertexAttribPointer,
  &funcViewport,
  &funcReadBuffer,
  &funcCopyTexSubImage3D,
  &funcGenQuerie,
  &funcDeleteQuerie,
  &funcIsQuery,
  &funcBeginQuery,
  &funcEndQuery,
  &funcUniformMatrix2x3fv,
  &funcUniformMatrix3x2fv,
  &funcUniformMatrix2x4fv,
  &funcUniformMatrix4x2fv,
  &funcUniformMatrix3x4fv,
  &funcUniformMatrix4x3fv,
  &funcBlitFramebuffer,
  &funcRenderbufferStorageMultisample,
  &funcFramebufferTextureLayer,
  &funcBindVertexArray,
  &funcDeleteVertexArray,
  &funcGenVertexArray,
  &funcIsVertexArray,
  &funcBeginTransformFeedback,
  &funcEndTransformFeedback,
  &funcBindBufferRange,
  &funcBindBufferBase,
  &funcVertexAttribI4i,
  &funcVertexAttribI4ui,
  &funcGetFragDataLocation,
  &funcUniform1ui,
  &funcUniform2ui,
  &funcUniform3ui,
  &funcUniform4ui,
  &funcClearBufferfv,
  &funcClearBufferfi,
  &funcCopyBufferSubData,
  &funcGetUniformBlockIndex,
  &funcUniformBlockBinding,
  &funcDrawArraysInstanced,
  &funcIsSampler,
  &funcBindSampler,
  &funcSamplerParameteri,
  &funcSamplerParameterf,
  &funcSamplerParameterfv,
  &funcVertexAttribDivisor,
  &funcBindTransformFeedback,
  &funcIsTransformFeedback,
  &funcPauseTransformFeedback,
  &funcResumeTransformFeedback,
  &funcProgramParameteri,
  &funcTexStorage2D,
  &funcTexStorage3D,
};
#endif/*mtots_m_opengles3_gen_h*/
