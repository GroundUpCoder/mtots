
"NAN is not a number"
final NAN Number = raise 0

final INFINITY Number = raise 0


def len(iterable) Int:
  "Returns the number of elements in a collection"


def sorted(iterable, key Any = nil) List:
  "Sorts all the items in the iterable and returns them as a list"


def exit() noreturn:
  pass


def type(value) Any:
  "Returns the value's class"


def chr(codePoint Int) String:
  r"""
  Given a unicode code point, returns a
  string of just that single code point.
  """


def ord(ch String) Int:
  r"""
  Given a string or length one, returns the code point of that character.
  """


def range(start Int, end Int=0, step Int=1) iterate[Int]:
  "Iterates over the numbers from start (inclusive) to end (exclusive)"


def int(value) Int:
  r"""
  Tries to convert the given value to an integer.
  """


def str(value) String:
  "Converts the given value to a string"


def repr(value) String:
  "Converts the given value to a string representation"


def abs(x Number) Number:
  "Returns the absolute value of x"


def sin(x Float) Float:
  "Returns the sine of x radians"


def cos(x Float) Float:
  "Returns the cosine of x radians"


def tan(x Float) Float:
  "Returns the tangent of x radians"


def print(x) nil:
  "print str(x) to stdout"


class Buffer:
  r"""
  Mutable, appendable array of bytes.

  NOTE: Because Buffer is appendable, the location of the bytes
  is not stable. Care should be taken when using C API
  that requires access to raw bytes.
  """

  def __init__(n) nil:
    r"""
    Argument n may be one of:
    * Int - to create a zerod out Buffer of n bytes
    * Buffer - to create a copy
    * String - to create a Buffer by copying the bytes from a String
    * List[Int] - from a list of direct byte values
    """

  def toRawString() String:
    "Returns a new String with the current contents of this Buffer"

  def getI8(index Int) Int:
    pass

  def getU8(index Int) Int:
    pass

  def getI16(index Int) Int:
    pass

  def getU16(index Int) Int:
    pass

  def getI32(index Int) Int:
    pass

  def getU32(index Int) Int:
    pass

  def getF32(index Int) Float:
    pass

  def getF64(index Int) Float:
    pass

  def setI8(index Int, value Int):
    pass

  def setU8(index Int, value Int):
    pass

  def setI16(index Int, value Int):
    pass

  def setU16(index Int, value Int):
    pass

  def setI32(index Int, value Int):
    pass

  def setU32(index Int, value Int):
    pass

  def setF32(index Int, value Float):
    pass

  def setF64(index Int, value Float):
    pass

  def addI8(value Int):
    pass

  def addU8(value Int):
    pass

  def addI16(value Int):
    pass

  def addU16(value Int):
    pass

  def addI32(value Int):
    pass

  def addU32(value Int):
    pass

  def addF32(value Float):
    pass

  def addF64(value Float):
    pass


class ByteArrayView:
  r"View into ByteArray"

  def raw() String:
    "Gets this byte array as a raw String"

  def view(start Int, end Int) ByteArrayView:
    pass

  def getI8(index Int) Int:
    pass

  def getU8(index Int) Int:
    pass

  def getI16(index Int) Int:
    pass

  def getU16(index Int) Int:
    pass

  def getI32(index Int) Int:
    pass

  def getU32(index Int) Int:
    pass

  def getF32(index Int) Float:
    pass

  def getF64(index Int) Float:
    pass

  def setI8(index Int, value Int):
    pass

  def setU8(index Int, value Int):
    pass

  def setI16(index Int, value Int):
    pass

  def setU16(index Int, value Int):
    pass

  def setI32(index Int, value Int):
    pass

  def setU32(index Int, value Int):
    pass

  def setF32(index Int, value Float):
    pass

  def setF64(index Int, value Float):
    pass


class ByteArray(ByteArrayView):
  r"""
  A mutable array of bytes. Even though the bytes are mutable,
  the size is fixed.
  """

  def __init__(n) nil:
    r"""
    Argument n may be one of:
    * Int - to create a zerod out ByteArray of n bytes
    * ByteArray - to create a copy
    * String - to create a ByteArray by copying the bytes in a String
    * List[Int] - from a list of direct byte values
    """


class File:

  def write(data String) nil:
    r"""
    Write the given data to this File.
    """

  def read(n Int?=nil) String:
    r"""
    Read n bytes from this File.
    """

  def close() nil:
    r"""Close this File"""
