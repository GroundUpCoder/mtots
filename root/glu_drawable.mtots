import opengles3 as gl
import bytearray


class BasicDrawable3D:
  def __init__(program, vertices, indices):
    this.program = program    # a shader program
    this.vertices = vertices  # a list of numbers representing vertices
    this.indices = indices    # a list of numbers representing indices
    this.verticesBuffer = gl.genBuffer()
    this.indicesBuffer = gl.genBuffer()
    this.vao = gl.genVertexArray()
    this.aVertexPosition = gl.getAttribLocation(program, 'aVertexPosition')
    this.uProjectionMatrix = gl.getUniformLocation(program, 'uProjectionMatrix')
    this.uModelViewMatrix = gl.getUniformLocation(program, 'uModelViewMatrix')
    this.projectionMatrixBytes = nil
    this.modelViewMatrixBytes = nil

    # Initialize verticesBuffer, and associate with aVertexPosition
    gl.bindBuffer(gl.ARRAY_BUFFER, this.verticesBuffer)
    gl.bufferData(gl.ARRAY_BUFFER, bytearray.fromF32(this.vertices), gl.STATIC_DRAW)
    gl.bindBuffer(gl.ARRAY_BUFFER, 0)

    # Initialize indicesBuffer
    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.indicesBuffer)
    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, bytearray.fromU16(this.indices), gl.STATIC_DRAW)
    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, 0)

    # Initialize vao
    gl.bindVertexArray(this.vao)
    gl.bindBuffer(gl.ARRAY_BUFFER, this.verticesBuffer)
    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.indicesBuffer)
    gl.enableVertexAttribArray(this.aVertexPosition)
    gl.vertexAttribPointer(this.aVertexPosition, 3, gl.FLOAT, false, 0, 0)
    gl.bindVertexArray(0)
    gl.bindBuffer(gl.ARRAY_BUFFER, 0)
    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, 0)

  def setProjectionMatrix(projectionMatrix):
    if this.projectionMatrixBytes is nil:
      this.projectionMatrixBytes = projectionMatrix.toByteArray()
    else:
      projectionMatrix.setByteArray(this.projectionMatrixBytes)

  def setModelViewMatrix(modelViewMatrix):
    if this.modelViewMatrixBytes is nil:
      this.modelViewMatrixBytes = modelViewMatrix.toByteArray()
    else:
      modelViewMatrix.setByteArray(this.modelViewMatrixBytes)

  def draw():
    gl.bindVertexArray(this.vao)
    gl.useProgram(this.program)

    gl.uniformMatrix4fv(this.uProjectionMatrix, 1, false, this.projectionMatrixBytes)
    gl.uniformMatrix4fv(this.uModelViewMatrix, 1, false, this.modelViewMatrixBytes)

    gl.drawElements(gl.LINE_LOOP, len(this.indices), gl.UNSIGNED_SHORT, 0)

    gl.useProgram(0)
    gl.bindVertexArray(0)
