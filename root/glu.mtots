r"""
My personal collection of OpenGL/SDL utilities

Basic usage:

app = App()

# Configure app here:
app.title = 'some title'
app.width = 1280
app.height = 960

# initialize
app.init()

# Do some initialization here:
# e.g. create shader programs

# run
app.run()

"""
import sdl
import opengles3 as gl
import glu_libshader as libshader

final DEFAULT_TITLE = 'app'
final DEFAULT_WIDTH = 640
final DEFAULT_HEIGHT = 480

final compileProgram = libshader.compileProgram

def f32Array(numbers):
  final ba = ByteArray(4 * len(numbers))
  for i in range(len(numbers)):
    ba.f32(4 * i, numbers[i])
  return ba

def u16Array(numbers):
  final ba = ByteArray(2 * len(numbers))
  for i in range(len(numbers)):
    ba.u16(2 * i, numbers[i])
  return ba

def _nopDraw():
  pass

def _nopEvent(_event):
  pass

class App:
  def __init__(title=nil, width=nil, height=nil):
    this.title = title or DEFAULT_TITLE
    this.screen_width = width or DEFAULT_WIDTH
    this.screen_height = height or DEFAULT_HEIGHT
    this.fps = 60
    this.window = nil
    this._onDraw = _nopDraw
    this._onKeydown = _nopEvent
    this.viewport_width = this.viewport_height = 0

    # Fields for redirecting calls to methods
    # This is primarily to allow '@' syntax
    def onDraw(onDraw):
      this.onDraw(onDraw)
    this.onDraw = onDraw

  def init():
    sdl.init(sdl.INIT_VIDEO)
    sdl.gl.setAttribute(sdl.gl.CONTEXT_PROFILE_MASK, sdl.gl.CONTEXT_PROFILE_ES)
    sdl.gl.setAttribute(sdl.gl.CONTEXT_MAJOR_VERSION, 3)
    sdl.gl.setAttribute(sdl.gl.CONTEXT_MINOR_VERSION, 0)
    sdl.gl.setAttribute(sdl.gl.DOUBLEBUFFER, 1)
    this.window = sdl.createWindow(
      this.title,
      sdl.WINDOWPOS_CENTERED, sdl.WINDOWPOS_CENTERED,
      this.screen_width, this.screen_height,
      sdl.WINDOW_OPENGL|sdl.WINDOW_ALLOW_HIGHDPI)
    sdl.gl.createContext(this.window)

    final dim = sdl.Point(0, 0)
    sdl.gl.getDrawableSize(this.window, dim)
    this.viewport_width = dim.x
    this.viewport_height = dim.y
    gl.viewport(0, 0, dim.x, dim.y)

  def onDraw(onDraw):
    this._onDraw = onDraw

  def onKeydown(onKeydown):
    this._onKeydown = onKeydown

  def run():
    # Run the event loop
    final ticksPerFrame = (1 / this.fps) * 1000 # 1 tick <-> millis
    final event = sdl.Event()
    final draw = this._onDraw
    final onKeydown = this._onKeydown

    while true:
      final startTicks = sdl.getTicks()
      while sdl.pollEvent(event):
        if event.type == sdl.QUIT:
          sdl.quit()
          return 0
        elif event.type == sdl.KEYDOWN:
          onKeydown(event)

      draw()

      final endTicks = sdl.getTicks()
      final elapsedTicks = endTicks - startTicks
      if ticksPerFrame > elapsedTicks:
        sdl.delay((ticksPerFrame - elapsedTicks) // 1)
